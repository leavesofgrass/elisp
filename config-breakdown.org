#+TITLE:A Breakdown of My Emacs Configuration
#+AUTHOR: Jon Pielaet
#+OPTIONS: date:nil
#+LATEX_HEADER: \usepackage[margin=0.3in]{geometry}
#+BEGIN_CENTER
	
/This is an example of a GNU Emacs configuration for use/ /with the Emacspeak text-to-speech system./
/Emacspeak is a software package that extends GNU Emacs (Emacs)/
/with powerful text-to-speech capabilities and enables people/
/with limited or no vision to use Emacs./
/Although Emacs is a text editor, it can also be programmed/ 
/to do many other tasks. As shown by this configuration,/

/Emacs can be used for just about anything./
/From staying organized with todo lists, to reading news, chatting online,/
/controling media players, or using multiple terminal emulators,/
/you can do all of it with Emacs./
   
/This configuration  has been customized for use with many/
/programming languages and applications./

/The initialization (init) of Emacs has been divided into/
/different files based on the data structures of the/
/Emacs Lisp language. (elisp) Each configuration file is included/
/below and can be used as a working example of how to use elisp/
/to customize Emacs./
#+END_CENTER

* Background 
In 2015, I started diving deeper into [[https://www.gnu.org/software/emacs/][GNU Emacs]] because I saw its
potential as an [[https://www.atia.org/at-resources/what-is-at/][assistive technology]]
Not only as a way of providing better access to books
and code for my students and clients, many of whom are blind, but also as a
tool for creating more accessible content. [[https://www.regular-expressions.info/][Regular expressions]] and modes
like [[https://orgmode.org/][Org]], [[https://jblevins.org/projects/markdown-mode/][Markdown]], and [[https://www.gnu.org/software/auctex/][AucTex]] are extremely useful in the 
production of [[https://www.queensu.ca/accessibility/how-info/what-are-alternate-formats][alternate formats]].

Although I had used Emacs as a vanilla text editor off and on since the
1990's, I didn't learn anything about the underlying Emacs Lisp (elisp) 
programming language until the end of 2015, when I got a hardcopy Emacs 
manual, quit my day job, and grew the requisite "LISP" beard.
Although the learning curve is very high, Emacs rewards the user with an almost unlimited amount of customization.
This means that if you don't like how something works, you can change it yourself. It's this extensibility that gives Emacs and Emacspeak their seamingly magical powers.

* Building Emacs and Emacspeak

Before you are able to make use of the elisp in this configuration you will need to have Emacs
and [[http://emacspeak.sourceforge.net/][Emacspeak]] installed.
I like to use the latest versions of both so I build from the source code.

** Required Disk Space

You should have about **two gigabytes** of storage free to be able to build the source code and run the configuration.
Although the final installed footprint is a much smaller, **300 megabytes** nominally, the development libraries and build depenencies create bulk. These can of course be remove once the installation is complete, if they are no longer needed. This can greatly conserve disk space.

** Compiling Emacs with Emacspeak on 64-bit Ubuntu

/(This example is for 64-bit Ubuntu but it may work on other [[https://distrowatch.com/search.php?basedon=Debian][Debian-based GNU/Linux distrobutions.]])/


=1. Make source code repositories available to apt by uncommenting=

#+BEGIN_SRC bash :tangle yes
sudo sed -i 's/# deb-src/deb-src/g' /etc/apt/sources.list
#+END_SRC

=2. Update sources list=
#+BEGIN_SRC bash :tangle yes
sudo apt update
#+END_SRC

=3. Upgrade any packages that are out-of-date=
#+BEGIN_SRC bash :tangle yes
sudo apt upgrade -y
#+END_SRC

=4. Install some dependencies=
#+BEGIN_SRC bash :tangle yes
sudo apt install git tclx8.4-dev -y && sudo apt-get build-dep emacs25 emacspeak -y
#+END_SRC
=5. Fetch GNU Emacs source code with git=
#+BEGIN_SRC bash :tangle yes
git clone -b master https://git.savannah.gnu.org/git/emacs.git ~/
#+END_SRC
=6. Fetch Emacspeak source code with git=
#+BEGIN_SRC bash :tangle yes
git clone https://github.com/tvraman/emacspeak ~/
#+END_SRC

=7. Build and install GNU Emacs=
#+BEGIN_SRC bash :tangle yes
cd ~/emacs
./autogen.sh && ./configure --with-imagemagick && make && sudo make install
#+END_SRC
=8. Build Emacspeak and install=
#+BEGIN_SRC bash :tangle yes
cd ~/emacspeak 
make && sudo make install
#+END_SRC

=9. Build optional speech server (I use IBM ViaVoice Outloud which gets installed before this)=
#+BEGIN_SRC bash :tangle yes
cd ~/emacspeak
make outloud && sudo make install
#+END_SRC

=10. Add an environment variable to your shell config file for the speech synthesizer you want to use.=

=(change espeak to outloud if you want to use outloud!)=

#+BEGIN_SRC bash :tangle yes
sed -e "\$aexport DTK_PROGRAM" ~/.bashrc

sed -e "\$aDTK_PROGRAM=espeak" ~/.bashrc
#+END_SRC

=11. Source the config file so the shell recognizes the changes=
=(or logout and login again)=
#+BEGIN_SRC bash :tangle yes
source ~/.bashrc
#+END_SRC


* Clone My Configuration Repository
Cloning a copy of the repository will make it easy to use the configuration without needing to make all the files from scratch.

#+BEGIN_SRC bash :tangle yes
git clone https://github.com/leavesofgrass/elisp ~/
#+END_SRC

* Installing the Emacs Lisp Packages
The very first time you run Emacs, you will want to tell the software
to download some packages before you can use the configuration.
I suggest installing the rest of the packages before you use Emacs too.
** Installing the Package Manager
Running the following from the command line will define package repos and install
the paradox package manager.

#+BEGIN_SRC bash 
emacs -Q -batch -l ~/elisp/package-repo.el ~/elisp/init-packages.el
#+END_SRC
** Installing the Remaining Packages
After paradox is installed, running the following will install the rest of the elisp packages asynchronously.

#+BEGIN_SRC bash 
emacs -Q -batch -l ~/elisp/package-repo.el ~/elisp/ensure-packages.el
#+END_SRC

Doing this before trying to use Emacs will help prevent any issues due to missing packages.
* early-init.el
(An elisp file for code to evaluate before any packages start.)

Usually stored in ~/.emacs.d/

#+BEGIN_SRC emacs-lisp :tangle yes
;; remove some bars

(menu-bar-mode 0)
(tool-bar-mode 0)
(scroll-bar-mode 0)

;; no blinking cursor

(blink-cursor-mode 0)

;; no init messages

(setq initial-scratch-message "")
(setq inhibit-startup-message t)

;; use a visual bell

(setq visible-bell t)

;; Shorten Yes/No Dialogs
;; Type Y or N instead of yes or no
;; in the minibuffer

(defalias 'yes-or-no-p 'y-or-n-p)

;; always load the newest byte code

(setq load-prefer-newer t)

;; prefer utf-8 for both display and editing

(prefer-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-default buffer-file-coding-system 'utf-8-unix)
(set-default-coding-systems 'utf-8-unix)
(prefer-coding-system 'utf-8-unix)
(set-default buffer-file-coding-system 'utf-8-unix)
#+END_SRC

* .emacs
~/.emacs or ~/.emacs.d/init.el

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; This file bootstraps the configuration, which is divided into
  ;; a number of other files.

  ;; Package repositories

  (setq package-repo-file "~/elisp/package-repo.el")
  (load package-repo-file)

  ;; Theme

  (setq load-theme-file "~/elisp/load-theme.el")
  (load load-theme-file)

  ;; Set by customize interface

  (setq custom-file "~/elisp/custom.el")
  (load custom-file)

  ;; Variable definitions 
  (setq defs-file "~/elisp/defs.el")
  (load defs-file)

  ;; Custom functions
  (setq func-file "~/elisp/func.el")
  (load func-file)

  ;; auto-mode-alist
  (setq auto-mode-file "~/elisp/auto-mode-alist.el")
  (load auto-mode-file)

  ;; Hooks
  (setq hooks-file "~/elisp/hooks.el")
  (load hooks-file)

  ;; Keybindings

  (setq keybindings-file "~/elisp/keybindings.el")
  (load keybindings-file)

  (setq modes-file "~/elisp/modes.el")
  (load modes-file)

  ;; Packages

  ;; (setq init-packages-file "~/elisp/init-packages.el")
  ;; (load init-packages-file)

  ;; (setq ensure-packages-file "~/elisp/ensure-packages.el")
  ;; (load ensure-packages-file)
#+END_SRC
** package-repo.el
(An elisp file to define package repository details.)

#+BEGIN_SRC emacs-lisp :tangle yes
;; Packages

(require 'cl)
(require 'package)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))

  ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired

  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)

  ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)

  (when (< emacs-major-version 24)

    ;; For important compatibility libraries like cl-lib

    (add-to-list 'package-archives '("gnu" . (concat proto "://elpa.gnu.org/packages/")))))

;; org

(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)

(package-initialize)

;; Paradox default interface

;;(paradox-enable)
#+END_SRC
** load-theme.el
(An elisp file to load all the bits of my theme.)

#+BEGIN_SRC emacs-lisp :tangle yes
;; load theme

(load-theme 'doom-vibrant t)
(doom-modeline-mode)

;; theme the visual bell

(doom-themes-visual-bell-config)

;; theme neotree and treemacs

(doom-themes-neotree-config)
(doom-themes-treemacs-config)

;; theme org

(doom-themes-org-config)
#+END_SRC
** custom.el
(An elisp file for the code generated by the Emacs customize interface.)

 #+BEGIN_SRC emacs-lisp :tangle yes
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(cider-auto-mode t)
 '(dectalk-default-speech-rate 440)
 '(dired-sidebar-subtree-line-prefix "__")
 '(dired-sidebar-theme 'icons)
 '(dired-sidebar-use-custom-font t)
 '(dired-sidebar-use-magit-integration t)
 '(dired-sidebar-use-term-integration t)
 '(dired-sidebar-width 20)
 '(dtk-speech-rate-base 200)
 '(dtk-speech-rate-step 100)
 '(elfeed-feeds
   '("https://www.reddit.com/r/mechanicalheadpens/.rss" 
     "http://pragmaticemacs.com/feed/" 
     ("http://emacs.stackexchange.com/feeds" emacs)
     ("http://pragmaticemacs.com/feed/" emacs)
     ("http://feeds.feedburner.com/XahsEmacsBlog" emacs)
     ("http://planet.emacsen.org/atom.xml" emacs)
     ("http://www.reddit.com/r/emacs/.rss" emacs)
     ("http://rss.slashdot.org/Slashdot/slashdotMain" daily)
     ("http://feeds.bbci.co.uk/news/rss.xml" daily)))
 '(emacspeak-speak-maximum-line-length 256)
 '(espeak-default-speech-rate 200)
 '(line-number-mode nil)
 '(minimap-automatically-delete-window t)
 '(minimap-dedicated-window t)
 '(minimap-highlight-line t)
 '(minimap-minimum-width 10 nil nil "minimap min width")
 '(minimap-width-fraction 0.03)
 '(minimap-window-location 'right)
 '(outloud-default-speech-rate 100)
 '(package-selected-packages
   '(adafruit-wisdom js3-mode rubocop rubocopfmt json-reformat clojure-mode-extra-font-locking pretty-symbols helm-jira
 helm-open-github helm-get-files emmet-mode all-the-icons-gnus all-the-icons-ivy bind-chord ac-html-angular ac-html-bootstrap 
ac-html-csswatcher tabbar free-keys git-gutter-fringe+ all-the-icons-dired dired-sidebar el-get realgud robe ensime scala-mode 
wanderlust swift-mode indent-guide flycheck-rtags ivy-hydra ox-reveal solaire-mode olivetti md4rd erlang pylint org-brain tide ag 
visual-regexp visual-regexp-steroids slack google-translate cask haskell-mode dumb-jump ob-ipython org-ref ess pdf-tools 
salesforce-utils edn ace-flyspell ace-isearch ace-mc evil-lispy toc-org cider calfw-ical calfw-org direx direx-grep elfeed
elfeed-goodies elfeed-org elfeed-protocol elfeed-web kaleidoscope kaleidoscope-evil-state-flash org org-plus-contrib sauron 
browse-kill-ring ox-epub ox-html5slide ox-pandoc pabbrev adaptive-wrap bash-completion aggressive-indent company-auctex company-dict 
company-inf-ruby company-php company-tern concurrent csv-mode diffview dismal dockerfile-mode dotnet magit-popup gnugo 
flatland-black-theme flatland-theme phoenix-dark-pink-theme wl ac-math ac-js2 ac-ispell ac-inf-ruby ac-html ac-helm org-wunderlist 
auto-complete-auctex auto-complete-c-headers auto-complete-chunk auto-complete-clang borg ace-window gmail2bbdb beacon-mode 
cl-lib-highlight yari yaml-mode volatile-highlights multi-term magithub magit inf-ruby gist expand-region emms clojure-mode chess 
coffee-mode erc-colorize erc-hl-nicks erc-status-sidebar erc-terminal-notifier erc-tweet erc-twitch erc-youtube smartparens 
oer-reveal org-pretty-tags say-what-im-doing speechd-el dropbox org-kindle helm-ack helm-bbdb helm-c-yasnippet helm-cider
helm-cider-history helm-dictionary helm-directory helm-elscreen helm-emmet helm-fuzzy-find helm-gitlab helm-gtags 
helm-helm-commands helm-hoogle helm-ispell helm-mode-manager helm-notmuch helm-orgcard helm-pages helm-pass helm-robe helm-spotify  
helm-spotify-plus helm-wordnet helm-youtube counsel-codesearch digitalocean digitalocean-helm helm-lines nerdtab org-listcruncher 
org-make-toc tfsmacs ahk-mode ivy-yasnippet load-env-vars yasnippet-classic-snippets js2-refactor json-mode keymap-utils 
magit-annex magit-find-file vdiff-magit which-key nhexl-mode nlinum nlinum-hl nlinum-relative nvm oauth oauth2 omnisharp org2jekyll 
org2web pandoc pandoc-mode powerline powerline-evil powershell projectile pydoc pydoc-info sos sx auctex bug-hunter calfw calfw-cal 
calfw-gcal cl-format cl-lib company-emoji dired-toggle dired-toggle-sudo easy-kill ein electric-case electric-operator 
electric-spacing evil evil-avy evil-mc evil-mc-extras flycheck gitconfig gitconfig-mode github-clone github-elpa github-issues github-modern-theme
 github-notifier github-pullrequest github-search github-stars google google-c-style graphene helm-flymake 
history hl-indent hl-sentence ido-at-point mew minimap twittering-mode use-package vdiff virtualenv virtualenvwrapper web-mode k
web-mode-edit-element web-search web-server websocket yasnippet yasnippet-snippets android-mode applescript-mode arduino-mode aria2 
avy bbcode-mode bbdb beacon counsel counsel-tramp helm-backup helm-eww helm-google helm-sheet helm-swoop helm-systemd smex 
ample-regexps helm helm-ag helm-ag-r helm-aws helm-bind-key helm-bm helm-books helm-chrome helm-codesearch helm-commandlinefu 
helm-company helm-dired-history helm-dired-recent-dirs helm-emms helm-firefox helm-flycheck helm-flyspell helm-git helm-git-files 
helm-git-grep helm-github-stars helm-gitignore helm-img helm-lastpass helm-ls-git helm-ls-hg helm-ls-svn helm-make helm-mt 
helm-pydoc helm-smex helm-themes helm-tramp helm-unicode helm-w3m hide-mode-line hl-sexp hl-todo ido-occur ido-yes-or-no ioccur 
jedi lastpass async async-await ample-theme company company-arduino company-c-headers company-irony company-jedi company-lua 
company-math company-shell company-sourcekit company-statistics company-suggest company-try-hard company-web crux undo-tree 
paradox))
 '(paradox-async-display-buffer-function nil)
 '(paradox-automatically-star t)
 '(paradox-execute-asynchronously t)
 '(paradox-github-token "")
 '(tts-strip-octals nil))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(minimap-active-region-background ((t (:background "#7bc275")))))
#+END_SRC
** defs.el
(An elisp file for variable definitions.)

 #+BEGIN_SRC emacs-lisp :tangle yes
;; email

(setq user-mail-address "jon@pielaet.net")


;; narrow region without comfrimation

(put 'narrow-to-region 'disabled nil)

;; font

(set-frame-font "source code pro 18")

;; paradox

(setq url-http-attempt-keepalives nil)
(setq paradox-execute-asynchronously 't)

;; company

;; set default `company-backends'
(setq company-backends
      '((company-files          ; files & directory
         company-keywords       ; keywords
         company-capf
         company-yasnippet
	 company-ghc
	 company-dict
	 company-shell
	 company-tern
         )
        (company-abbrev company-dabbrev)
        ))

;; hide pesky warnings (the lazy way of suppressing the pop-up debugger on init)
;; Emacspeak frequently has some byte code that isn't happy with the existing site-lisp
;; this will prevent it from being annoying at startup but,
;; it will still show the debugger in emergencies

(setq warning-minimum-level :emergency)

;; git-gutter+

(setq git-gutter-fr+-side 'right-fringe)

(setq git-gutter+-disabled-modes '(asm-mode image-mode hexl-mode))

;; org-mode

(require 'org)

(setq org-log-done t)

;; org-agenda

(setq org-agenda-files (list "~/Dropbox/Documents/Orgzly/agenda.org"
			     "~/Dropbox/Documents/Orgzly/ToDo.org"
			     "~/Dropbox/Documents/Orgzly/gcal.org"
			     "~/Dropbox/Documents/Orgzly/notebook.org"))

;; org-gcal

(setq org-gcal-client-id "xxxxxx.apps.googleusercontent.com"
org-gcal-client-secret ""
org-gcal-file-alist '(("jon@pielaet.net" . "~/Dropbox/Documents/Orgzly/gcal.org")))

;; Syntax highlighting for org export

(setq org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted"))
      org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

#+END_SRC
** func.el
(An elisp file for custom function definitions.)

 #+BEGIN_SRC emacs-lisp :tangle yes

;; Custom Functions

;; avoid duplication of the paradox buffer if one already exists
;; otherwise create one when called


(defun visit-paradox ()
  "Create or visit a `paradox' buffer."
  (interactive)
  (if (not (get-buffer "*Packages*"))
      (progn (split-window-sensibly (selected-window))
             (other-window 1)
             (paradox-list-packages ()))
    (switch-to-buffer-other-window "*Packages*")))
(global-set-key (kbd "<f13>")
                (lambda ()
                  (interactive)
                  (visit-paradox)))

;; gnus
(defun visit-gnus ()
  "Create or visit a gnus buffer."
  (interactive)
  (if (not (get-buffer "*Group*"))
      (progn (split-window-sensibly (selected-window))
             (other-window 1)
             (gnus))
    (switch-to-buffer-other-window "*Group*")))

;; book searching

(defun amazon-search ()
  "Search amazon.com for the selected region if any, display a query prompt otherwise." 
  (interactive) 
  (browse-url (concat "http://www.amazon.com/s/?url=search-alias%3Daps&field-keywords="
(url-hexify-string (if mark-active 
(buffer-substring 
(region-beginning) 
(region-end)) 
(read-string "Amazon: "))))))

(defun bookshare-catalog-search ()
  "Search the Bookshare.org catalog for the selected region if any, display a query prompt otherwise."
  (interactive)
  (browse-url (concat "https://www.bookshare.org/search?keyword="
(url-hexify-string (if mark-active
(buffer-substring
(region-beginning)
(region-end))
(read-string "Bookshare Catalog: "))))))

(defun google-books-search ()
  "Search Google Books for the selected region if any, display a query prompt otherwise."
  (interactive)
  (browse-url (concat "https://www.google.com/search?tbm=bks&q=" 
(url-hexify-string (if mark-active
(buffer-substring
(region-beginning)
(region-end))
(read-string
 "Google Books: "))))))


(defun powells-search ()
  "Search the Powell's City of Books website for the selected region if any, display a query prompt otherwise."
  (interactive)
  (browse-url (concat "http://www.powells.com/SearchResults?kw=title:"
(url-hexify-string (if mark-active
(buffer-substring
(region-beginning)
(region-end))
(read-string
"Powell's: "))))))

(defun vintage-books-search ()
  "Search vintage-books.com for the selected region if any, display a query prompt otherwise."
  (interactive)
  (browse-url (concat
               "http://www.vintage-books.com/?CLSN_2361=1457058371236132db4b040a3027589f&keyword="
(url-hexify-string (if mark-active
(buffer-substring
(region-beginning)
(region-end))
(read-string "Vintage Books: "))))))

(defun worldcat-catalog-search ()
  "Search the worldcat.org catalog for the selected region if any, display a query prompt otherwise."
  (interactive)
  (browse-url (concat "https://www.worldcat.org/search?qt=worldcat_org_all&q="
(url-hexify-string (if mark-active
(buffer-substring
(region-beginning)
(region-end))
(read-string
 "WorldCat Catalog: "))))))

;; flatten all headlines in org

(defun flatten-org-headlines ()
  "Flatten all headlines in org-mode using replace-regexp"
 (interactive)
 (replace-regexp "^\*+" "**"))

;; push-minimap-over

(defun push-minimap-over ()
  "Enlarge the main window so the minimap is a reasonable size"
  (interactive)
  (enlarge-window-horizontally 100))

;; crush the whitespace in a buffer

(defun minify-json-buffer-contents()
  "Minifies the buffer contents by removing whitespaces."
  (interactive)
  (delete-whitespace-rectangle (point-min) (point-max))
  (mark-whole-buffer)
  (goto-char (point-min))
  (while (search-forward "\n" nil t) (replace-match "" nil t)))


;; function to load the emacspeak setup file
;; can be bound to a key (Esc-M-s set in keybindings.el)

(defun start-speech ()
  "Start Emacspeak"
  (interactive)
  (load-file "~/emacspeak/lisp/emacspeak-setup.el")
  )

;; dired-sidebar
;; dired-sidebar-toggle-sidebar
;; is also bound to C-<Esc>
;; in keybindings.el

(use-package dired-sidebar
  :load-path "What you got from pwd."
  :bind (("C-x C-n" . dired-sidebar-toggle-sidebar))
  :ensure nil
  :commands (dired-sidebar-toggle-sidebar)
  :config
  (use-package all-the-icons-dired
    ;; M-x all-the-icons-install-fonts
    :ensure t
    :commands (all-the-icons-dired-mode)))

;; undo-tree really hates linum
(defun undo-tree-visualizer-update-linum
    (&rest
     args)
  (linum-update undo-tree-visualizer-parent-buffer))
(advice-add 'undo-tree-visualize-undo
            :after #'undo-tree-visualizer-update-linum)
(advice-add 'undo-tree-visualize-redo
            :after #'undo-tree-visualizer-update-linum)
(advice-add 'undo-tree-visualize-undo-to-x
            :after #'undo-tree-visualizer-update-linum)
(advice-add 'undo-tree-visualize-redo-to-x
            :after #'undo-tree-visualizer-update-linum)
(advice-add 'undo-tree-visualizer-mouse-set
            :after #'undo-tree-visualizer-update-linum)
(advice-add 'undo-tree-visualizer-set
            :after #'undo-tree-visualizer-update-linum)

#+END_SRC
** auto-mode-alist.el
(An elisp file to set automatic modes by file extension.)

#+BEGIN_SRC emacs-lisp :tangle yes
;; auto-mode-alist

;; Associate file extensions with a mode.

(add-to-list 'auto-mode-alist '("\\.asp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.aspx\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.bash\\'" . shell-script-mode))
(add-to-list 'auto-mode-alist '("\\.bzip2\\'" . dired-mode))
(add-to-list 'auto-mode-alist '("\\.cask\\'" . cask-mode ))
(add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.csv\\'" . csv-mode))
(add-to-list 'auto-mode-alist '("\\.dtd\\'" . nxml-mode))
(add-to-list 'auto-mode-alist '("\\.edn\\'" . js3-mode))
(add-to-list 'auto-mode-alist '("\\.elf\\'" . hexl-mode))
(add-to-list 'auto-mode-alist '("\\.exe\\'" . hexl-mode))
(add-to-list 'auto-mode-alist '("\\.gif\\'" . image-mode))
(add-to-list 'auto-mode-alist '("\\.gitignore\\'" . gitignore-mode))
(add-to-list 'auto-mode-alist '("\\.gzip\\'" . dired-mode))
(add-to-list 'auto-mode-alist '("\\.hex\\'" . hexl-mode))
(add-to-list 'auto-mode-alist '("\\.hs\\'" . haskell-mode))
(add-to-list 'auto-mode-alist '("\\.htm\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.ino\\'" . arduino-mode))
(add-to-list 'auto-mode-alist '("\\.jpeg\\'" . image-mode))
(add-to-list 'auto-mode-alist '("\\.jpg\\'" . image-mode))
(add-to-list 'auto-mode-alist '("\\.js\\'" . js3-mode))
(add-to-list 'auto-mode-alist '("\\.json\\'" . js3-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.o\\'" . hexl-mode))
(add-to-list 'auto-mode-alist '("\\.pdf\\'" . image-mode))
(add-to-list 'auto-mode-alist '("\\.php\\'" . php-mode))
(add-to-list 'auto-mode-alist '("\\.png\\'" . image-mode))
(add-to-list 'auto-mode-alist '("\\.pyd\\'" . cython-mode))
(add-to-list 'auto-mode-alist '("\\.pyi\\'" .  cython-mode))
(add-to-list 'auto-mode-alist '("\\.pyx\\'" . cython-mode))
(add-to-list 'auto-mode-alist '("\\.rb\\'" . inf-ruby-minor-mode))
(add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode))
(add-to-list 'auto-mode-alist '("\\.sh\\'" . shell-script-mode))
(add-to-list 'auto-mode-alist '("\\.so\\'" . hexl-mode))
(add-to-list 'auto-mode-alist '("\\.svg\\'" . image-mode))
(add-to-list 'auto-mode-alist '("\\.tar.gz\\'" . dired-mode))
(add-to-list 'auto-mode-alist '("\\.tar\\'" . dired-mode))
(add-to-list 'auto-mode-alist '("\\.tgz\\'" . dired-mode))
(add-to-list 'auto-mode-alist '("\\.tif\\'" . image-mode))
(add-to-list 'auto-mode-alist '("\\.tiff\\'" . image-mode))
(add-to-list 'auto-mode-alist '("\\.txt\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.webp\\'" . image-mode))
(add-to-list 'auto-mode-alist '("\\.xhtml\\'" . nxml-mode))
(add-to-list 'auto-mode-alist '("\\.xz\\'" . dired-mode))
(add-to-list 'auto-mode-alist '("\\.zip\\'" . dired-mode))
(add-to-list 'auto-mode-alist '("\\.zsh\\'" . shell-script-mode))
#+END_SRC
** hooks.el
(An elisp file to set how modes interact.)

#+BEGIN_SRC emacs-lisp :tangle yes
;; icons in dired buffers

(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)

;; clojure

(add-hook 'clojure-mode-hook #'subword-mode)
(add-hook 'clojure-mode-hook #'smartparens-strict-mode)
(add-hook 'clojure-mode-hook #'aggressive-indent-mode)
(add-hook 'clojure-mode-hook 'cider-mode)

;; nlinum

(add-hook 'prog-mode-hook 'nlinum-mode +1)
(add-hook 'emacs-lisp-mode-hook 'nlinum-mode +1)

;; enable visual line wrapping in text modes

(add-hook 'text-mode-hook 'visual-line-mode)

;; enable yasnippet selectively in some modes

(add-hook 'android-mode-hook 'yas-minor-mode +1)
(add-hook 'arduino-mode-hook 'yas-minor-mode +1)
(add-hook 'c++-mode-hook 'yas-minor-mode +1)
(add-hook 'c-mode-hook 'yas-minor-mode +1)
(add-hook 'clojure-mode-hook 'yas-minor-mode +1)
(add-hook 'edn-mode-hook 'yas-minor-mode +1)
(add-hook 'ein-mode-hook 'yas-minor-mode +1)
(add-hook 'emacs-lisp-mode-hook 'yas-minor-mode +1)
(add-hook 'go-mode-hook 'yas-minor-mode +1)
(add-hook 'haskell-mode-hook 'yas-minor-mode +1)
(add-hook 'java-mode-hook 'yas-minor-mode +1)
(add-hook 'js2-mode-hook 'yas-minor-mode +1)
(add-hook 'lisp-interaction-mode-hook 'yas-minor-mode +1)
(add-hook 'fundemental-mode-hook 'yas-minor-mode +1)
(add-hook 'markdown-mode-hook 'yas-minor-mode +1)
(add-hook 'nxml-mode-hook 'yas-minor-mode +1)
(add-hook 'org-mode-hook 'yas-minor-mode +1)
(add-hook 'perl-mode-hook 'yas-minor-mode +1)
(add-hook 'php-mode-hook 'yas-minor-mode +1)
(add-hook 'python-mode-hook 'yas-minor-mode +1)
(add-hook 'ruby-mode-hook 'yas-minor-mode +1)
(add-hook 'rust-mode-hook 'yas-minor-mode +1)
(add-hook 'scala-mode-hook 'yas-minor-mode +1)
(add-hook 'shell-mode-hook 'yas-minor-mode +1)
(add-hook 'web-mode-hook 'yas-minor-mode +1)
(add-hook 'yaml-mode-hook 'yas-minor-mode +1)

;; gnus

(add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus)

;; company

(add-hook 'lisp-interaction-mode-hook
          (lambda ()
            (set (make-local-variable 'company-backends)
                 '(company-elisp))))

;; org-gcal-sync

(add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync) ))
(add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))
#+END_SRC
** keybindings.el
(An elisp file to set custom key sequences and shortcuts in Emacs.)

#+BEGIN_SRC emacs-lisp :tangle yes
;; Keybindings originally for the kinesis advantage

(defun wizard-keys ()
  "keybindings for wizard-mode"

  ;; testing keys

  (global-set-key (kbd "M-<up>") 'backward-page)
  (global-set-key (kbd "M-<down>") 'forward-page)

  ;; emacspeak

  (global-set-key (kbd "C-<f6>") 'toggle-tones)
  (global-set-key (kbd "<pause>")'emacspeak-speak-buffer-interactively)
  (global-set-key (kbd "C-<pause>")'emacspeak-speak-buffer-filename)

;; completion

  (global-set-key "\t" 'indent-relative)

  ;;  (global-set-key "\t" 'company-complete-common)
  (global-set-key (kbd "C--") 'hippie-expand)
  (global-set-key (kbd "C-0") 'company-complete)

  ;; text scrubbing

  ;; visual regexp

  (global-set-key (kbd "<ESC> M-q") 'vr/query-replace)
  (global-set-key (kbd "<ESC> M-r") 'vr/replace)

  ;; ag

  (global-set-key (kbd "M-g d") 'ag-dired)
  (global-set-key (kbd "M-g f") 'ag-files)

  ;; avy

  (global-set-key (kbd "C-<Scroll_Lock>") 'avy-pop-mark)
  (global-set-key (kbd "<ESC> M-c") 'avy-goto-char)
  (global-set-key (kbd "<ESC> M-w") 'avy-goto-word-0)
  (global-set-key (kbd "<ESC> M-l") 'avy-goto-line)

  ;; whitespace

  (global-set-key (kbd "<ESC> M-=") 'fixup-whitespace)

  
  ;; thumb keys (kinesis advantage)

  (global-set-key (kbd "<end>") 'action-key)
  (global-set-key (kbd "<prior>") 'hyperbole)
  (global-set-key (kbd "<next>") 'dtk-stop)
  (global-set-key (kbd "s-<next>") 'ace-window)
  (global-set-key (kbd "s-<prior>") 'ace-window)
  (global-set-key (kbd "C-M-<next>") 'next-buffer)
  (global-set-key (kbd "C-M-<prior>") 'previous-buffer)
  (global-set-key (kbd "<home>") 'keyboard-escape-quit)
  (global-set-key (kbd "M-<prior>") 'scroll-down-command)
  (global-set-key (kbd "M-<next>") 'scroll-up-command)
  (global-set-key (kbd "M-<home>") 'move-beginning-of-line)
  (global-set-key (kbd "M-<end>") 'move-end-of-line)
  (global-set-key (kbd "C-<next>") 'ace-window)
  (global-set-key (kbd "C-<prior>") 'ace-window)

  ;; ui

  (global-set-key (kbd "<ESC> M-h") 'hyperbole)
  (global-set-key (kbd "<ESC> M-\\") 'hidden-mode-line-mode)
  (global-set-key (kbd "C-<tab>") 'ace-window)
  (global-set-key (kbd "<ESC> <ESC> <ESC>") 'keyboard-escape-quit)
  (global-set-key (kbd "<ESC> M-b") 'helm-buffers-list)
  (global-set-key (kbd "<mouse-8>") 'previous-buffer)
  (global-set-key (kbd "<mouse-9>")'next-buffer)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
  (global-set-key (kbd "<f1>") 'helm-buffers-list)
  (global-set-key (kbd "<f2>") 'helm-company)
  (global-set-key (kbd "M-<f1>") 'helm-mt)
  (global-set-key (kbd "C-<f12>") 'hidden-mode-line-mode)
  (global-set-key (kbd "C-<f2>")
                  (lambda ()
                    (interactive)
                    (find-file "~/.emacs")))

  (global-set-key (kbd "<C-f3>")
                  (lambda ()
                    (interactive)
                    (switch-to-buffer "*Messages*")))
  (global-set-key (kbd  "<ESC> M-a")
                  (lambda ()
                    (interactive)
                    (find-file "~/.emacs.d/mma.org")))


  ;; major modes

  
  ;; multi-term alist
  (defcustom term-unbind-key-list '("M-[" "C-z" "C-x" "C-c" "C-h" "C-y" "<ESC>")
    "The key list that will need to be unbind."
    :type 'list
    :group 'multi-term)
  (defcustom term-bind-key-alist
    '(("C-c C-c" . term-interrupt-subjob)
      ("C-p" . previous-line)
      ("C-n" . next-line)
      ("C-s" . isearch-forward)
      ("C-r" . isearch-backward)
      ("C-m" . term-send-raw)
      ("M-f" . term-send-forward-word)
      ("M-b" . term-send-backward-word)
      ("M-o" . term-send-backspace)
      ("M-p" . term-send-up)
      ("M-n" . term-send-down)
      ("M-M" . term-send-forward-kill-word)
      ("M-N" . term-send-backward-kill-word)
      ("M-r" . term-send-reverse-search-history)
      ("M-," . term-send-input)
      ("M-." . comint-dynamic-complete))
    "The key alist that will need to be bind."
    :type 'alist
    :group 'multi-term)
  ;; erc hide-join-part-quit-key
  (eval-after-load "erc" '(progn (define-key erc-mode-map "C-M-h"
                                   (lambda ()
                                     (interactive "")
                                     (setq erc-hide-list '("JOIN" "PART" "QUIT"))))))

  ;; counsel-spotify
  ;; skip around playlists in the official spotify app via D-bus service
  
  (global-set-key (kbd "<ESC> M-n") 'counsel-spotify-next)
  (global-set-key (kbd "<ESC> M-p") 'counsel-spotify-previous)
  (global-set-key (kbd "<ESC> M-<SPC>") 'counsel-spotify-toggle-play-pause)

  ;; magit
  
  (global-set-key (kbd "<ESC> M-;") 'magit-status)

;; mode switching
  ;; keys to switch between different modes
  
  (global-set-key (kbd "<f5>") 'nlinum-mode)
  (global-set-key (kbd "<f6>") 'ispell-word)
  (global-set-key (kbd "<ESC> M-i") 'ispell-word)
  (global-set-key (kbd "<f7>") 'flyspell-mode)
  (global-set-key (kbd "<f8>") 'dired-sidebar-toggle-sidebar)
  (global-set-key (kbd "<f9>") 'minimap-mode)
  (global-set-key (kbd "<f12>") 'menu-bar-mode)
  (global-set-key (kbd "<C-f5>") 'scroll-bar-mode)
  (global-set-key (kbd "<C-f7>")'flycheck-mode)
  (global-set-key (kbd "<C-f8>") 'tabbar-mode)
  (global-set-key (kbd "<ESC> M-R") 'yas-reload-all)
  (global-set-key (kbd "<ESC> M-d") 'dired)
  (global-set-key (kbd "<ESC> M-f") 'flyspell)
  (global-set-key (kbd "<ESC> M-g") 'visit-gnus)
  (global-set-key (kbd "<ESC> M-m") 'markdown-mode)
  (global-set-key (kbd "<ESC> M-o") 'org-mode)
  (global-set-key (kbd "<ESC> M-v") 'visit-paradox)
  (global-set-key (kbd "<ESC> M-s") 'start-speech)
  (global-set-key (kbd "<ESC> M-t") 'multi-term)
  (global-set-key (kbd "<ESC> M-y") 'yas-minor-mode)
  (global-set-key (kbd "C-s-SPC") 'dtk-stop))

(wizard-keys)

;; sudo-prepend

(fset 'sudo-prepend-up [up home ?s ?u ?d ?o ?  end])
(fset 'sudo-prepend [home ?s ?u ?d ?o ?  end])

;; easy-kill

(global-set-key [remap kill-ring-save] 'easy-kill)
(global-set-key [remap mark-sexp] 'easy-mark)

;; aptitude search key bindings for paradox

(defun my-paradox-mode-keys ()
  "Modify keymaps used by paradox to make searching easier."
  (local-set-key (kbd "/") 'isearch-forward-regexp)
  (local-set-key (kbd "-") 'isearch-backward-regexp))
(add-hook 'paradox-menu-mode-hook 'my-paradox-mode-keys)

;; org-agenda

(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)


;; window resizing

(global-set-key (kbd "C-s-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "C-s-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "C-s-<down>") 'shrink-window)
(global-set-key (kbd "C-s-<up>") 'enlarge-window)

;; dired-sidebar

(global-set-key (kbd "<ESC> M-z") 'dired-sidebar-toggle-sidebar)
(global-set-key (kbd "C-<escape>") 'dired-sidebar-toggle-sidebar)

;; paradox upgrade packages 

(global-set-key (kbd "<ESC> M-u") 'paradox-upgrade-packages)

;; mini

(global-set-key (kbd "<ESC> M-/") 'minimap-mode)

;; atreus window keys

(global-set-key (kbd "C-x p") 'delete-window)
(global-set-key (kbd "C-x q") 'delete-other-windows)
(global-set-key (kbd "C-x w") 'split-window-below)
(global-set-key (kbd "C-x t") 'make-frame-command)

#+END_SRC
** modes.el
(An elisp file to customize modes. This includes, global modes, and 
the initialization of the Emacspeak text-to-speech subsystem.)

#+BEGIN_SRC emacs-lisp :tangle yes

;; smex

(smex-initialize)

;; global modes

(global-company-mode)
(global-magit-file-mode)
(global-prettify-symbols-mode)
(solaire-global-mode)
(smartparens-global-mode)
(global-undo-tree-mode)
(global-git-gutter+-mode)

;; Emacspeak (global-voice-lock-mode)
;; uncomment the following line to load speech during init

(load-file "~/emacspeak/lisp/emacspeak-setup.el")

;; livedown
;; live markdown previews in the browser
;; https://github.com/shime/emacs-livedown

;; This package is NOT in MELPA
;; install it manually and then uncomment these lines

;;(add-to-list 'load-path "~/.emacs.d/elpa/livedown")
;;(load "livedown")

#+END_SRC

** init-packages.el
(An elisp file to make sure the package management tools are installed.)

 #+BEGIN_SRC emacs-lisp :tangle yes
;; Make sure async, paradox, and use-package are installed before proceeding to install other packages

(defvar init-packages
  '(async ;; https://github.com/jwiegley/emacs-async
paradox ;; paradox  ;; https://github.com/Malabarba/paradox
use-package) ;; https://github.com/jwiegley/use-package
"A list of packages to init are installed at launch.")

(defun init-packages-package-installed-p (p)
  (cond ((package-installed-p p) t)
	(t nil)))

(defun init-packages-installed-p ()
  (mapcar 'init-packages-package-installed-p init-packages))

(defun init-packages-install-missing ()
  (interactive)
  (unless (every 'identity (init-packages-installed-p))
  ;; check for new packages (package versions)
  (message "%s" "Emacs is now refreshing its package database...")
  (package-refresh-contents)
  (message "%s" " done.")
  ;; install the missing packages
  (dolist (p init-packages)
    (when (not (package-installed-p p))
      (package-install p)))))

(provide 'init-packages)

(init-packages-install-missing)
#+END_SRC
** ensure-packages.el
(An elisp file to ensure Emacs packages are installed.)

#+BEGIN_SRC emacs-lisp :tangle yes
;; Make sure these packages are installed

(defvar ensure-packages
  '(ac-cider ;; https://github.com/clojure-emacs/ac-cider
ac-clang ;; https://github.com/yaruopooner/ac-clang
ac-helm  ;; https://github.com/yasuyk/ac-helm
ac-html  ;; https://github.com/cheunghy/ac-html
ac-html-angular ;; https://github.com/osv/ac-html-bootstrap
ac-html-bootstrap ;; https://github.com/osv/ac-html-bootstrap
ac-html-csswatcher  ;; https://github.com/osv/ac-html-csswatcher
ac-inf-ruby ;; https://github.com/purcell/ac-inf-ruby
ac-ispell  ;; https://github.com/syohex/emacs-ac-ispell
ac-js2  ;; https://github.com/ScottyB/ac-js2
ac-math ;; https://github.com/vitoshka/ac-math
ac-php ;; https://github.com/xcwen/ac-php
ac-rtags ;; http://rtags.net
ace-flyspell ;; https://github.com/cute-jumper/ace-flyspell
ace-isearch ;; https://github.com/tam17aki/ace-isearch
ace-link ;; https://github.com/abo-abo/ace-link
ace-mc ;; https://github.com/mm--/ace-mc
ace-window ;; https://github.com/abo-abo/ace-window
adafruit-wisdom ;; https://github.com/gonewest818/adafruit-wisdom.el
adaptive-wrap ;; http://elpa.gnu.org/packages/adaptive-wrap.html
adjust-parens ;; http://elpa.gnu.org/packages/adjust-parens.html
aggressive-indent ;; https://github.com/Malabarba/aggressive-indent-mode
all-the-icons-dired ;; https://github.com/jtbm37/all-the-icons-dired
all-the-icons-gnus ;; https://github.com/nlamirault/all-the-icons-gnus
all-the-icons-ivy ;; https://github.com/asok/all-the-icons-ivy
ample-regexps ;; https://github.com/immerrr/ample-regexps.el
ample-theme   ;; https://github.com/jordonbiondo/ample-theme
android-mode ;; https://github.com/remvee/android-mode
applescript-mode ;; https://github.com/ieure/applescript-mode
arduino-mode  ;; https://github.com/stardiviner/arduino-mode
auctex ;; http://www.gnu.org/software/auctex/
avy  ;; https://github.com/abo-abo/avy
bash-completion ;; https://github.com/szermatt/emacs-bash-completion
bbdb ;; https://elpa.gnu.org/packages/bbdb.html
beacon ;; https://github.com/Malabarba/beacon
bind-chord ;; https://github.com/waymondo/use-package-chords
browse-kill-ring ;; https://github.com/browse-kill-ring/browse-kill-ring
bug-hunter  ;; https://github.com/Malabarba/elisp-bug-hunter
calfw  ;; https://github.com/kiwanami/emacs-calfw
calfw-gcal ;; https://github.com/myuhe/calfw-gcal.el
calfw-ical ;; https://github.com/kiwanami/emacs-calfw
calfw-org ;; https://github.com/kiwanami/emacs-calfw
cask ;; http://github.com/cask/cask
chess  ;; http://elpa.gnu.org/packages/chess.html
cider ;; http://www.github.com/clojure-emacs/cider
cider-decompile ;; http://www.github.com/clojure-emacs/cider-decompile
clj-refactor ;; https://github.com/clojure-emacs/clj-refactor.el
cljr-helm ;; https://github.com/philjackson/cljr-helm
clojure-mode ;; http://github.com/clojure-emacs/clojure-mode
clojure-mode-extra-font-locking ;; http://github.com/clojure-emacs/clojure-mode
coffee-mode ;; http://github.com/defunkt/coffee-mode/
company ;; http://company-mode.github.io/
company-arduino ;; https://github.com/yuutayamada/company-arduino
company-auctex ;; https://github.com/alexeyr/company-auctex/
company-c-headers ;; https://github.com/randomphrase/company-c-headers
company-dict ;; https://github.com/hlissner/emacs-company-dict
company-ghc ;; https://github.com/iquiw/company-ghc
company-go ;; https://github.com/mdempsky/gocode
company-inf-ruby ;; https://github.com/company-mode/company-inf-ruby
company-irony ;; https://github.com/Sarcasm/company-irony/
company-jedi ;; https://github.com/syohex/emacs-company-jedi
company-math ;; https://github.com/vspinu/company-math
company-php ;; https://github.com/xcwen/ac-php
company-rtags ;; http://rtags.net
company-shell ;; https://github.com/Alexander-Miller/company-shell
company-statistics ;; https://github.com/company-mode/company-statistics
company-suggest ;; https://github.com/juergenhoetzel/company-suggest
company-tern ;; https://github.com/proofit404/company-tern
company-try-hard ;; https://github.com/Wilfred/company-try-hard
company-web ;; https://github.com/osv/company-web
concurrent ;; https://github.com/kiwanami/emacs-deferred/
counsel ;; https://github.com/abo-abo/swiper
counsel-tramp ;; https://github.com/masasam/emacs-counsel-tramp
crux ;; https://github.com/bbatsov/crux
csv-mode ;; http://elpa.gnu.org/packages/csv-mode.html
cython-mode ;; https://github.com/cython/cython
diff-hl ;; https://github.com/dgutov/diff-hl
diffview ;; https://github.com/mgalgs/diffview-mode
dired-sidebar ;; https://github.com/jojojames/dired-sidebar
direx ;; https://github.com/m2ym/direx-el
direx-grep ;; https://github.com/aki2o/direx-grep
dismal ;; http://elpa.gnu.org/packages/dismal.html
dockerfile-mode ;; https://github.com/spotify/dockerfile-mode
doom-modeline ;; https://github.com/seagle0128/doom-modeline
doom-themes ;; https://github.com/hlissner/emacs-doom-theme
dotnet ;; https://github.com/julienXX/dotnet.el
dropbox ;; https://github.com/pavpanchekha/dropbox.el
dumb-jump ;; https://github.com/jacktasia/dumb-jump
easy-kill  ;; https://github.com/leoliu/easy-kill
edn ;; https://www.github.com/expez/edn.el
ein  ;; https://github.com/millejoh/emacs-ipython-notebook
el-get ;; http://www.emacswiki.org/emacs/el-get
elfeed  ;; https://github.com/skeeto/elfeed
elfeed-goodies ;; https://github.com/algernon/elfeed-goodies
elfeed-org ;; https://github.com/remyhonig/elfeed-org
elfeed-protocol ;; https://github.com/fasheng/elfeed-protocol
elfeed-web ;; https://github.com/skeeto/elfeed
elisp-format  ;; https://github.com/Yuki-Inoue/elisp-format
elisp-lint ;; http://github.com/gonewest818/elisp-lint/
emmet-mode ;; https://github.com/smihica/emmet-mode
emms ;; http://www.gnu.org/software/emms/
ensime ;; https://github.com/ensime/ensime-emacs
erc-colorize ;; https://github.com/thisirs/erc-colorize.git
erc-hl-nicks ;; http://www.github.com/leathekd/erc-hl-nicks
erc-status-sidebar ;; https://github.com/drewbarbs/erc-status-sidebar
erc-tweet  ;; https://github.com/kidd/erc-tweet.el
erc-twitch ;; https://github.com/vibhavp/erc-twitch
erc-youtube ;; https://github.com/kidd/erc-youtube.el
erlang ;; https://github.com/erlang/otp
ess ;; https://ess.r-project.org/
evil-lispy ;; https://github.com/sp3ctum/evil-lispy
evil-mc  ;; https://github.com/gabesoft/evil-mc
evil-mc-extras ;; https://github.com/gabesoft/evil-mc-extras
expand-region ;; https://github.com/magnars/expand-region.el
flycheck ;; http://www.flycheck.org
flycheck-rtags ;; http://rtags.net
free-keys ;; https://github.com/Fuco1/free-keys
gist ;; https://github.com/defunkt/gist.el
git-gutter+ ;; https://github.com/nonsequitur/git-gutter-plus
git-gutter-fringe+  ;; https://github.com/nonsequitur/git-gutter-fringe-plus
github-explorer ;; https://github.com/TxGVNN/github-explorer
gmail2bbdb ;; http://github.com/redguardtoo/gmail2bbdb
gnugo ;; http://www.gnuvola.org/software/gnugo/
go-mode ;; https://github.com/dominikh/go-mode.el
google-c-style ;; https://github.com/google/styleguide
google-translate ;; https://github.com/atykhonov/google-translate
haskell-mode ;; https://github.com/haskell/haskell-mode~
helm ;; https://emacs-helm.github.io/helm/
helm-ag ;; https://github.com/syohex/emacs-helm-ag
helm-ag-r ;; https://github.com/yuutayamada/helm-ag-r
helm-aws ;; https://github.com/istib/helm-aws
helm-chrome ;; https://github.com/kawabata/helm-chrome
helm-cider ;; https://github.com/clojure-emacs/helm-cider
helm-cider-history ;; https://github.com/Kungi/helm-cider-history
helm-company ;; https://github.com/Sodel-the-Vociferous/helm-company
helm-dired-history ;; https://github.com/jixiuf/helm-dired-history
helm-dired-recent-dirs ;; https://github.com/yynozk/helm-dired-recent-dirs 
helm-emmet ;; https://github.com/yasuyk/helm-emmet
helm-emms ;; https://github.com/emacs-helm/helm-emms
helm-eww ;; https://github.com/emacs-helm/helm-eww
helm-git ;; https://github.com/maio/helm-git
helm-git-files ;; https://github.com/kenbeese/helm-git-files
helm-git-grep ;; https://github.com/yasuyk/helm-git-grep
helm-github-stars ;; https://github.com/Sliim/helm-github-stars
helm-gitignore ;; https://github.com/jupl/helm-gitignore
helm-google ;; https://framagit.org/steckerhalter/helm-google
helm-flycheck ;; https://github.com/yasuyk/helm-flycheck
helm-flyspell ;; https://github.com/pronobis/helm-flyspell
helm-ispell ;; https://github.com/syohex/emacs-helm-ispell
helm-jira ;; https://github.com/DeX3/helm-jira
helm-lines ;; https://github.com/torgeir/helm-lines.el/
helm-lastpass ;; https://github.com/xuchunyang/helm-lastpass
helm-ls-git ;; https://github.com/emacs-helm/helm-ls-git
helm-make ;; https://github.com/abo-abo/helm-make
helm-mt ;; https://github.com/dfdeshom/helm-mt
helm-open-github ;; https://github.com/syohex/emacs-helm-open-github
helm-org-rifle ;; http://github.com/alphapapa/helm-org-rifle
helm-rtags ;; http://rtags.net
helm-smex ;; https://github.com/ptrv/helm-smex
helm-spotify-plus  ;; https://github.com/wandersoncferreira/helm-spotify-plus
helm-swoop ;; https://github.com/ShingoFukuyama/helm-swoop
helm-systemd ;; https://github.com/Lompik/helm-systemd
helm-tramp ;; https://github.com/masasam/emacs-helm-tramp
helm-unicode ;; https://github.com/bomgar/helm-unicode
helm-w3m ;; https://github.com/emacs-helm/helm-w3m
helm-wordnet ;; https://github.com/raghavgautam/helm-wordnet
helm-youtube ;; https://github.com/maximus12793/helm-youtube
hide-mode-line ;; https://github.com/hlissner/emacs-hide-mode-line
hyperbole ;; http://www.gnu.org/software/hyperbole
indent-guide ;; http://hins11.yu-yake.com/
inf-clojure  ;; http://github.com/clojure-emacs/inf-clojure
inf-ruby ;; http://github.com/nonsequitur/inf-ruby
ivy-hydra ;; https://github.com/abo-abo/swiper
ivy-rtags ;; http://rtags.net
ioccur  ;; https://github.com/thierryvolpiatto/ioccur
jedi ;; https://github.com/tkf/emacs-jedi
js3-mode ;; https://github.com/tamzinblake/js3-mode
json-mode ;; https://github.com/joshwnj/json-mode
json-reformat ;; https://github.com/gongo/json-reformat
kaleidoscope ;; https://github.com/algernon/kaleidoscope.el
kaleidoscope-evil-state-flash ;; https://github.com/algernon/kaleidoscope.el
magit ;; https://github.com/magit/magit
magit-annex  ;; https://github.com/magit/magit-annex
magit-lfs ;; https://github.com/ailrun/magit-lfs
magit-popup ;; https://github.com/magit/magit-popup
magithub ;; https://github.com/vermiculus/magithub
matlab-mode ;; http://sourceforge.net/projects/matlab-emacs/
md4rd ;; https://github.com/ahungry/md4rd
minimap ;; http://elpa.gnu.org/packages/minimap.html
multi-term ;; http://www.emacswiki.org/emacs/download/multi-term.el
neotree ;; https://github.com/jaypei/emacs-neotree
nlinum ;; http://elpa.gnu.org/packages/nlinum.html
oauth ;; https://github.com/psanford/emacs-oauth
ob-ipython ;; http://www.gregsexton.org
olivetti ;; https://github.com/rnkn/olivetti
omnisharp ;; https://github.com/Omnisharp/omnisharp-emacs
org ;; https://orgmode.org/
org-brain ;; http://github.com/Kungsgeten/org-brain
org-download ;; https://github.com/abo-abo/org-download
org-jira ;; https://github.com/ahungry/org-jira
org-journal ;; http://github.com/bastibe/org-journal
org-mind-map ;; https://github.com/theodorewiles/org-mind-map
org-plus-contrib ;; https://orgmode.org/
org-pomodoro ;; https://github.com/lolownia/org-pomodoro
org-projectile ;;https://github.com/IvanMalison/org-projectile
org-projectile-helm ;; https://github.com/IvanMalison/org-projectile
org-ref ;; https://github.com/jkitchin/org-ref
org-timeline ;; https://github.com/Fuco1/org-timeline/
org-web-tools ;; http://github.com/alphapapa/org-web-tools
org2jekyll ;; https://github.com/ardumont/org2jekyll
ox-epub ;; http://github.com/ofosos/org-epub
ox-html5slide ;; http://github.com/coldnew/org-html5slide
ox-pandoc ;; https://github.com/kawabata/ox-pandoc
ox-reveal ;; https://github.com/yjwen/org-reveal
pabbrev ;; https://github.com/phillord/pabbrev
pandoc-mode ;; https://github.com/joostkremers/pandoc-mode
pdf-tools ;; https://github.com/politza/pdf-tools
pdf-view-restore ;; https://github.com/007kevin/pdf-view-restore
pianobar ;; http://github.com/agrif/pianobar.el
powerline ;; http://github.com/milkypostman/powerline/
powershell ;; http://github.com/jschaf/powershell.el
projectile  ;; https://github.com/bbatsov/projectile
pretty-symbols ;; http://github.com/drothlis/pretty-symbols
pylint ;; https://github.com/PyCQA/pylint
realgud ;; http://github.com/realgud/realgud/
robe ;; https://github.com/dgutov/robe
rubocop ;; https://github.com/rubocop-hq/rubocop-emacs
rubocopfmt ;; https://github.com/jimeh/rubocopfmt.el
salesforce-utils ;; https://github.com/grimnebulin/emacs-salesforce
sauron ;; https://github.com/djcb/sauron
scala-mode ;; https://github.com/ensime/emacs-scala-mode
slack ;; https://github.com/yuya373/emacs-slack
smartparens ;; https://github.com/Fuco1/smartparens
smex ;; http://github.com/nonsequitur/smex/
solaire-mode ;; https://github.com/hlissner/emacs-solaire-mode
swift-mode ;; https://github.com/swift-emacs/swift-mode
sx ;; https://github.com/vermiculus/sx.el/
tabbar ;; https://github.com/dholm/tabbar
tide ;; http://github.com/ananthakumaran/tide
toc-org ;; https://github.com/snosov1/toc-org
treemacs ;; https://github.com/Alexander-Miller/treemacs
undo-tree ;; http://www.dr-qubit.org/emacs.php
vdiff ;; https://github.com/justbur/emacs-vdiff
virtualenvwrapper  ;; http://github.com/porterjamesj/virtualenvwrapper.el
visual-regexp ;; https://github.com/benma/visual-regexp.el
visual-regexp-steroids ;; https://github.com/benma/visual-regexp-steroids.el
wanderlust ;; https://github.com/wanderlust/wanderlust
web-server ;; https://github.com/eschulte/emacs-web-server
websocket ;; https://github.com/ahyatt/emacs-websocket
which-key ;; https://github.com/justbur/emacs-which-key
yaml-mode ;; https://github.com/yoshiki/yaml-mode
yari ;; https://github.com/hron/yari.el
yasnippet  ;; http://github.com/joaotavora/yasnippet
yasnippet-snippets ;; https://github.com/AndreaCrotti/yasnippet-snippets
ztree) ;; https://github.com/fourier/ztree
"A list of packages to ensure are installed at launch.")

(defun ensure-packages-package-installed-p (p)
  (cond ((package-installed-p p) t)
	(t nil)))

(defun ensure-packages-installed-p ()
  (mapcar 'ensure-packages-package-installed-p ensure-packages))

(defun ensure-packages-install-missing ()
  (interactive)
  (unless (every 'identity (ensure-packages-installed-p))
  ;; check for new packages (package versions)
  (message "%s" "Emacs is now refreshing its package database...")
  (package-refresh-contents)
  (message "%s" " done.")
  ;; install the missing packages
  (dolist (p ensure-packages)
    (when (not (package-installed-p p))
      (package-install p)))))

(provide 'ensure-packages)

;; Uncomment this to install missing packages during init

(ensure-packages-install-missing)

#+END_SRC

* A Thank You
Many people have contributed to my knowlege, and implementation of Emacs.
I would like to thank the following people for their help, and wisdom:

[[https://batsov.com/][Bozhidar Batsov,]]
[[https://sachachua.com/blog/][Sacha Chua]],
[[https://github.com/purcell][Steve Purcell]],
[[http://emacspeak.sourceforge.net/raman/][T.V. Raman]],
[[http://xahlee.org/][Xah Lee]]

* License 

@@html:<a rel="license" href="http://creativecommons.org/licenses/by/4.0/"><img alt="Creative Commons License" style="border-width:0" src="https://i.creativecommons.org/l/by/4.0/88x31.png" /></a><br />This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution 4.0 International License</a>.@@
@@html:<br>@@
Made with [[https://orgmode.org/][org-mode]] and [[https://www.latex-project.org/][\(\LaTeX\)]]

