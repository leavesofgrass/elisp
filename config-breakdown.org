#+TITLE:A Breakdown of My Emacs Configuration
#+AUTHOR: Jon Pielaet
#+OPTIONS: date:nil
#+LATEX_HEADER: \usepackage[margin=0.3in]{geometry}

#+BEGIN_CENTER

This is an example of a GNU Emacs configuration for use with the Emacspeak text-to-speech system.
Emacspeak is a software package that extends GNU Emacs (Emacs)
with powerful text-to-speech capabilities and enables people
with limited or no vision to use Emacs.

Although Emacs is a text editor, it can also be programmed 
to do many other tasks. As shown by this configuration,
Emacs can be used for just about anything.
From staying organized with todo lists, to reading news, chatting online,
controling media players, or using multiple terminal emulators,
you can do all of it with Emacs.

This configuration  has been customized for use with many
programming languages and applications.

The initialization (init) of Emacs has been divided into
different files based on the data structures of the
Emacs Lisp language. (elisp) Each configuration file is included
below and can be used as a working example of how to use elisp
to customize Emacs.
#+END_CENTER

* Background
In 2015, I started diving deeper into [[https://www.gnu.org/software/emacs/][GNU Emacs]] because I saw its
potential as an [[https://www.atia.org/at-resources/what-is-at/][assistive technology]]
Not only as a way of providing better access to books
and code for my students and clients, many of whom are blind, but also as a
tool for creating more accessible content. [[https://www.regular-expressions.info/][Regular expressions]] and modes
like [[https://orgmode.org/][Org]], [[https://jblevins.org/projects/markdown-mode/][Markdown]], and [[https://www.gnu.org/software/auctex/][AucTex]] are extremely useful in the 
production of [[https://www.queensu.ca/accessibility/how-info/what-are-alternate-formats][alternate formats]].

Although I had used Emacs as a vanilla text editor off and on since the
1990's, I didn't learn anything about the underlying Emacs Lisp (elisp) 
programming language until the end of 2015, when I got a hardcopy Emacs 
manual, quit my day job, and grew the requisite "LISP" beard.
Although the learning curve is very high, Emacs rewards the user with an almost unlimited amount of customization.
This means that if you don't like how something works, you can change it yourself. It's this extensibility that gives Emacs and Emacspeak their seamingly magical powers.

* Building Emacs and Emacspeak
Before you are able to make use of the elisp in this configuration you will need to have Emacs
and [[http://emacspeak.sourceforge.net/][Emacspeak]] installed.
I like to use the latest versions of both so I build from the source code.
** Required Disk Space

You should have about **two gigabytes** of storage free to be able to build the source code and run the configuration.
Although the final installed footprint is a much smaller, **500 megabytes** nominally, the development libraries and build depenencies create bulk. These can of course be remove once the installation is complete, if they are no longer needed. This can greatly conserve disk space.

** Compiling Emacs with Emacspeak on 64-bit Ubuntu

/(This example is for 64-bit Ubuntu but it may work on other [[https://distrowatch.com/search.php?basedon=Debian][Debian-based GNU/Linux distrobutions.]])/

=1. Make source code repositories available to apt by uncommenting=

#+BEGIN_SRC bash :tangle yes
sudo sed -i 's/# deb-src/deb-src/g' /etc/apt/sources.list > /etc/apt/sources.list
#+END_SRC

=2. Update sources list=
#+BEGIN_SRC bash :tangle yes
sudo apt update
#+END_SRC

=3. Upgrade any packages that are out-of-date=
#+BEGIN_SRC bash :tangle yes
sudo apt upgrade -y
#+END_SRC

=4. Install some dependencies=
#+BEGIN_SRC bash :tangle yes
sudo apt install git tclx8.4-dev -y && sudo apt-get build-dep emacs emacspeak -y
#+END_SRC
=5. Fetch GNU Emacs source code with git=
#+BEGIN_SRC bash :tangle yes
cd ~/
git clone -b master https://git.savannah.gnu.org/git/emacs.git
#+END_SRC
=6. Fetch Emacspeak source code with git=
#+BEGIN_SRC bash :tangle yes
cd ~/
git clone https://github.com/tvraman/emacspeak 
#+END_SRC

=7. Build and install GNU Emacs=
#+BEGIN_SRC bash :tangle yes
cd ~/emacs
./autogen.sh && ./configure --with-imagemagick && make && sudo make install
#+END_SRC
=8. Build and install Emacspeak=
#+BEGIN_SRC bash :tangle yes
cd ~/emacspeak 
make && sudo make install
#+END_SRC

=9. Build optional speech server=
(I use the IBM ViaVoice Outloud server with Voxin from [[https://oralux.org/][Oralux]] which gets installed before this)
#+BEGIN_SRC bash :tangle yes
cd ~/emacspeak
make outloud && sudo make install
#+END_SRC

=10. Add an environment variable to your shell config file for the speech synthesizer you want to use.=

=(change espeak to outloud if you want to use outloud!)=

#+BEGIN_SRC bash :tangle yes

echo "export DTK_PROGRAM" >> ~/.bashrc
echo "DTK_PROGRAM=outloud" >> ~/.bashrc

#+END_SRC

=11. Source the config file so the shell recognizes the changes=
=(or logout and login again)=
#+BEGIN_SRC bash :tangle yes
source ~/.bashrc
#+END_SRC

* Configuration Repository
Cloning a copy of the repository will make it easy to use the configuration without needing to make all the files from scratch.

#+BEGIN_SRC bash :tangle yes
git clone https://github.com/leavesofgrass/elisp ~/
#+END_SRC

* Installing the Emacs Lisp Packages
** Using git
Using git to clone all of the packages at once is the fastest way to get started.

#+BEGIN_SRC bash :tangle yes
cd ~/
git clone https://github.com/leavesofgrass/.emacs.d
#+END_SRC
** Using Emacs
You can also install most of the packages using Emacs itself.

*** Installing the Package Manager

Running the following from the command line will define package repos and install
the paradox package manager.

#+BEGIN_SRC bash 
emacs -Q -batch -l ~/elisp/package-repo.el ~/elisp/init-packages.el
#+END_SRC
*** Installing the Remaining Packages
After paradox is installed, running the following will install several other elisp packages asynchronously.
This will also happen during init.
#+BEGIN_SRC bash 
emacs -Q -batch -l ~/elisp/package-repo.el ~/elisp/ensure-packages.el
#+END_SRC

* This file may not be updated as frequently as the rest of the repository the rest of this is only intended as an example. (Please see the other files in the repo for the most up-to-date Emacs Lisp.)

* .emacs
~/.emacs or ~/.emacs.d/init.el

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; This file bootstraps the configuration, which is divided into
  ;; a number of other files.

  ;; Package repositories

  (setq package-repo-file "~/elisp/package-repo.el")
  (load package-repo-file)

  ;; Theme

  (setq load-theme-file "~/elisp/load-theme.el")
  (load load-theme-file)

  ;; Set by customize interface

  (setq custom-file "~/elisp/custom.el")
  (load custom-file)

  ;; Variable definitions 
  (setq defs-file "~/elisp/defs.el")
  (load defs-file)

  ;; Custom functions
  (setq func-file "~/elisp/func.el")
  (load func-file)

  ;; auto-mode-alist
  (setq auto-mode-file "~/elisp/auto-mode-alist.el")
  (load auto-mode-file)

  ;; Hooks
  (setq hooks-file "~/elisp/hooks.el")
  (load hooks-file)

  ;; Keybindings

  (setq keybindings-file "~/elisp/keybindings.el")
  (load keybindings-file)

  (setq modes-file "~/elisp/modes.el")
  (load modes-file)

  ;; Packages

  ;; (setq init-packages-file "~/elisp/init-packages.el")
  ;; (load init-packages-file)

  ;; (setq ensure-packages-file "~/elisp/ensure-packages.el")
  ;; (load ensure-packages-file)
#+END_SRC
** package-repo.el
(An elisp file to define package repository details.)

#+BEGIN_SRC emacs-lisp :tangle yes
;; Packages

(require 'cl)
(require 'package)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))

  ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired

  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)

  ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)

  (when (< emacs-major-version 24)

    ;; For important compatibility libraries like cl-lib

    (add-to-list 'package-archives '("gnu" . (concat proto "://elpa.gnu.org/packages/")))))

(package-initialize)

;; Paradox default interface

;;(paradox-enable)
#+END_SRC
** load-theme.el
(An elisp file to load all the bits of my theme.)

#+BEGIN_SRC emacs-lisp :tangle yes
;; load theme

(load-theme 'doom-vibrant t)
(doom-modeline-mode)

;; theme the visual bell

(doom-themes-visual-bell-config)

;; theme neotree and treemacs

(doom-themes-neotree-config)
(doom-themes-treemacs-config)

;; theme org

(doom-themes-org-config)
#+END_SRC
** custom.el
(An elisp file for the code generated by the Emacs customize interface.)

 #+BEGIN_SRC emacs-lisp :tangle yes
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(cider-auto-mode t)
 '(dectalk-default-speech-rate 440)
 '(dired-sidebar-subtree-line-prefix "__")
 '(dired-sidebar-theme 'icons)
 '(dired-sidebar-use-custom-font t)
 '(dired-sidebar-use-magit-integration t)
 '(dired-sidebar-use-term-integration t)
 '(dired-sidebar-width 20)
 '(dtk-speech-rate-base 200)
 '(dtk-speech-rate-step 100)
 '(elfeed-feeds
   '("https://www.reddit.com/r/mechanicalheadpens/.rss" 
     "http://pragmaticemacs.com/feed/" 
     ("http://emacs.stackexchange.com/feeds" emacs)
     ("http://pragmaticemacs.com/feed/" emacs)
     ("http://feeds.feedburner.com/XahsEmacsBlog" emacs)
     ("http://planet.emacsen.org/atom.xml" emacs)
     ("http://www.reddit.com/r/emacs/.rss" emacs)
     ("http://rss.slashdot.org/Slashdot/slashdotMain" daily)
     ("http://feeds.bbci.co.uk/news/rss.xml" daily)))
 '(emacspeak-speak-maximum-line-length 256)
 '(espeak-default-speech-rate 200)
 '(line-number-mode nil)
 '(minimap-automatically-delete-window t)
 '(minimap-dedicated-window t)
 '(minimap-highlight-line t)
 '(minimap-minimum-width 10 nil nil "minimap min width")
 '(minimap-width-fraction 0.03)
 '(minimap-window-location 'right)
 '(outloud-default-speech-rate 100)
 '(package-selected-packages
   '(adafruit-wisdom js3-mode rubocop rubocopfmt json-reformat clojure-mode-extra-font-locking pretty-symbols helm-jira
 helm-open-github helm-get-files emmet-mode all-the-icons-gnus all-the-icons-ivy bind-chord ac-html-angular ac-html-bootstrap 
ac-html-csswatcher tabbar free-keys git-gutter-fringe+ all-the-icons-dired dired-sidebar el-get realgud robe ensime scala-mode 
wanderlust swift-mode indent-guide flycheck-rtags ivy-hydra ox-reveal solaire-mode olivetti md4rd erlang pylint org-brain tide ag 
visual-regexp visual-regexp-steroids slack google-translate cask haskell-mode dumb-jump ob-ipython org-ref ess pdf-tools 
salesforce-utils edn ace-flyspell ace-isearch ace-mc evil-lispy toc-org cider calfw-ical calfw-org direx direx-grep elfeed
elfeed-goodies elfeed-org elfeed-protocol elfeed-web kaleidoscope kaleidoscope-evil-state-flash org org-plus-contrib sauron 
browse-kill-ring ox-epub ox-html5slide ox-pandoc pabbrev adaptive-wrap bash-completion aggressive-indent company-auctex company-dict 
company-inf-ruby company-php company-tern concurrent csv-mode diffview dismal dockerfile-mode dotnet magit-popup gnugo 
flatland-black-theme flatland-theme phoenix-dark-pink-theme wl ac-math ac-js2 ac-ispell ac-inf-ruby ac-html ac-helm org-wunderlist 
auto-complete-auctex auto-complete-c-headers auto-complete-chunk auto-complete-clang borg ace-window gmail2bbdb beacon-mode 
cl-lib-highlight yari yaml-mode volatile-highlights multi-term magithub magit inf-ruby gist expand-region emms clojure-mode chess 
coffee-mode erc-colorize erc-hl-nicks erc-status-sidebar erc-terminal-notifier erc-tweet erc-twitch erc-youtube smartparens 
oer-reveal org-pretty-tags say-what-im-doing speechd-el dropbox org-kindle helm-ack helm-bbdb helm-c-yasnippet helm-cider
helm-cider-history helm-dictionary helm-directory helm-elscreen helm-emmet helm-fuzzy-find helm-gitlab helm-gtags 
helm-helm-commands helm-hoogle helm-ispell helm-mode-manager helm-notmuch helm-orgcard helm-pages helm-pass helm-robe helm-spotify  
helm-spotify-plus helm-wordnet helm-youtube counsel-codesearch digitalocean digitalocean-helm helm-lines nerdtab org-listcruncher 
org-make-toc tfsmacs ahk-mode ivy-yasnippet load-env-vars yasnippet-classic-snippets js2-refactor json-mode keymap-utils 
magit-annex magit-find-file vdiff-magit which-key nhexl-mode nlinum nlinum-hl nlinum-relative nvm oauth oauth2 omnisharp org2jekyll 
org2web pandoc pandoc-mode powerline powerline-evil powershell projectile pydoc pydoc-info sos sx auctex bug-hunter calfw calfw-cal 
calfw-gcal cl-format cl-lib company-emoji dired-toggle dired-toggle-sudo easy-kill ein electric-case electric-operator 
electric-spacing evil evil-avy evil-mc evil-mc-extras flycheck gitconfig gitconfig-mode github-clone github-elpa github-issues github-modern-theme
 github-notifier github-pullrequest github-search github-stars google google-c-style graphene helm-flymake 
history hl-indent hl-sentence ido-at-point mew minimap twittering-mode use-package vdiff virtualenv virtualenvwrapper web-mode k
web-mode-edit-element web-search web-server websocket yasnippet yasnippet-snippets android-mode applescript-mode arduino-mode aria2 
avy bbcode-mode bbdb beacon counsel counsel-tramp helm-backup helm-eww helm-google helm-sheet helm-swoop helm-systemd smex 
ample-regexps helm helm-ag helm-ag-r helm-aws helm-bind-key helm-bm helm-books helm-chrome helm-codesearch helm-commandlinefu 
helm-company helm-dired-history helm-dired-recent-dirs helm-emms helm-firefox helm-flycheck helm-flyspell helm-git helm-git-files 
helm-git-grep helm-github-stars helm-gitignore helm-img helm-lastpass helm-ls-git helm-ls-hg helm-ls-svn helm-make helm-mt 
helm-pydoc helm-smex helm-themes helm-tramp helm-unicode helm-w3m hide-mode-line hl-sexp hl-todo ido-occur ido-yes-or-no ioccur 
jedi lastpass async async-await ample-theme company company-arduino company-c-headers company-irony company-jedi company-lua 
company-math company-shell company-sourcekit company-statistics company-suggest company-try-hard company-web crux undo-tree 
paradox))
 '(paradox-async-display-buffer-function nil)
 '(paradox-automatically-star t)
 '(paradox-execute-asynchronously t)
 '(paradox-github-token "")
 '(tts-strip-octals nil))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(minimap-active-region-background ((t (:background "#7bc275")))))
#+END_SRC
** defs.el
(An elisp file for variable definitions.)

 #+BEGIN_SRC emacs-lisp :tangle yes

;; backups

(setq backup-directory-alist `(("." . "~/.saves")))
      
;; email

(setq user-full-name "Jon Pielaet")
(setq user-mail-address "jon@pielaet.net")


;; narrow region without comfrimation

(put 'narrow-to-region 'disabled nil)

;; paradox

(setq url-http-attempt-keepalives nil)
(setq paradox-execute-asynchronously 't)

;; company

;; set default `company-backends'
(setq company-backends
      '((company-files          ; files & directory
         company-keywords       ; keywords
         company-capf
         company-yasnippet
	 company-ghc
	 company-dict
	 company-shell
	 company-tern
         )
        (company-abbrev company-dabbrev)
        ))

;; hide pesky warnings (the lazy way of suppressing the pop-up debugger on init)
;; Emacspeak frequently has some byte code that isn't happy with the existing site-lisp
;; this will prevent it from being annoying at startup but,
;; it will still show the debugger in emergencies

(setq warning-minimum-level :emergency)

;; git-gutter+

(setq git-gutter-fr+-side 'right-fringe)

(setq git-gutter+-disabled-modes '(asm-mode image-mode hexl-mode))

;; org-mode

(require 'org)

(setq org-log-done t)

;; org-agenda

(setq org-agenda-files (list "~/Documents/agenda.org"
			     "~/Documents/ToDo.org"
			     "~/Documents/notebook.org"))


#+END_SRC
** func.el
(An elisp file for custom function definitions.)

 #+BEGIN_SRC emacs-lisp :tangle yes

;; Custom Functions

;; avoid duplication of the paradox buffer if one already exists
;; otherwise create one when called


(defun visit-paradox ()
  "Create or visit a `paradox' buffer."
  (interactive)
  (if (not (get-buffer "*Packages*"))
      (progn (split-window-sensibly (selected-window))
             (other-window 1)
             (paradox-list-packages ()))
    (switch-to-buffer-other-window "*Packages*")))
(global-set-key (kbd "<f13>")
                (lambda ()
                  (interactive)
                  (visit-paradox)))

;; gnus
(defun visit-gnus ()
  "Create or visit a gnus buffer."
  (interactive)
  (if (not (get-buffer "*Group*"))
      (progn (split-window-sensibly (selected-window))
             (other-window 1)
             (gnus))
    (switch-to-buffer-other-window "*Group*")))

;; searching
 
(defun amazon-search ()
  "Search amazon.com for the selected region if any, display a query prompt otherwise." 
  (interactive) 
	(browse-url (concat "http://www.amazon.com/s/?url=search-alias%3Daps&field-keywords="
		(url-hexify-string (if mark-active 
			(buffer-substring 
				(region-beginning) 
					(region-end)) 
						(read-string "Amazon: "))))))

(defun youtube-web-search ()
  "Search YouTube for the selected region if any, display a query prompt otherwise."
  (interactive)
	(browse-url (concat "https://www.youtube.com/results?search_query="
		(url-hexify-string (if mark-active
			(buffer-substring
				(region-beginning)
					(region-end))
						(read-string "YouTube: "))))))				
						
(defun bard-catalog-search ()
  "Search the NLS BARD catalog for the selected region if any, display a query prompt otherwise."
  (interactive)
	(browse-url (concat "https://nlsbard.loc.gov/nlsbardprod/search/collection/srch/"
		(url-hexify-string (if mark-active
			(buffer-substring
				(region-beginning)
					(region-end))
						(read-string "BARD Catalog: "))))))						
 
(defun bookshare-catalog-search ()
  "Search the Bookshare.org catalog for the selected region if any, display a query prompt otherwise."
  (interactive)
	(browse-url (concat "https://www.bookshare.org/search?keyword="
		(url-hexify-string (if mark-active
			(buffer-substring
				(region-beginning)
					(region-end))
						(read-string "Bookshare Catalog: "))))))
 
(defun google-books-search ()
  "Search Google Books for the selected region if any, display a query prompt otherwise."
  (interactive)
	(browse-url (concat "https://www.google.com/search?tbm=bks&q=" 
		(url-hexify-string (if mark-active
			(buffer-substring
				(region-beginning)
					(region-end))
						(read-string "Google Books: "))))))
 
(defun powells-search ()
  "Search the Powell's City of Books website for the selected region if any, display a query prompt otherwise."
  (interactive)
	(browse-url (concat "http://www.powells.com/SearchResults?kw=title:"
		(url-hexify-string (if mark-active
			(buffer-substring
				(region-beginning)
					(region-end))
						(read-string "Powell's: "))))))
 
(defun vintage-books-search ()
  "Search vintage-books.com for the selected region if any, display a query prompt otherwise."
  (interactive)
	(browse-url (concat "http://www.vintage-books.com/?CLSN_2361=1457058371236132db4b040a3027589f&keyword="
		(url-hexify-string (if mark-active
			(buffer-substring
				(region-beginning)
					(region-end))
						(read-string "Vintage Books: "))))))
 
(defun worldcat-catalog-search ()
  "Search the worldcat.org catalog for the selected region if any, display a query prompt otherwise."
  (interactive)
	(browse-url (concat "https://www.worldcat.org/search?qt=worldcat_org_all&q="
		(url-hexify-string (if mark-active
			(buffer-substring
				(region-beginning)
					(region-end))
						(read-string "WorldCat Catalog: "))))))

;; flatten all headlines in org

(defun flatten-org-headlines ()
  "Flatten all headlines in org-mode using replace-regexp"
 (interactive)
 (replace-regexp "^\*+" "**"))

;; push-minimap-over

(defun push-minimap-over ()
  "Enlarge the main window so the minimap is a reasonable size"
  (interactive)
  (enlarge-window-horizontally 100))

;; crush the whitespace in a buffer

(defun minify-json-buffer-contents()
  "Minifies the buffer contents by removing whitespaces."
  (interactive)
  (delete-whitespace-rectangle (point-min) (point-max))
  (mark-whole-buffer)
  (goto-char (point-min))
  (while (search-forward "\n" nil t) (replace-match "" nil t)))


;; function to load the emacspeak setup file
;; can be bound to a key (Esc-M-s set in keybindings.el)

(defun start-emacspeak ()
  "Start Emacspeak"
  (interactive)
  (load-file "~/emacspeak/lisp/emacspeak-setup.el")
  )

#+END_SRC
** auto-mode-alist.el
(An elisp file to set automatic modes by file extension.)

#+BEGIN_SRC emacs-lisp :tangle yes
;; auto-mode-alist

;; Associate file extensions with a mode.

(add-to-list 'auto-mode-alist '("\\.asp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.aspx\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.bash\\'" . shell-script-mode))
(add-to-list 'auto-mode-alist '("\\.bzip2\\'" . dired-mode))
(add-to-list 'auto-mode-alist '("\\.cask\\'" . cask-mode ))
(add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.csv\\'" . csv-mode))
(add-to-list 'auto-mode-alist '("\\.dtd\\'" . nxml-mode))
(add-to-list 'auto-mode-alist '("\\.edn\\'" . js3-mode))
(add-to-list 'auto-mode-alist '("\\.elf\\'" . hexl-mode))
(add-to-list 'auto-mode-alist '("\\.exe\\'" . hexl-mode))
(add-to-list 'auto-mode-alist '("\\.gif\\'" . image-mode))
(add-to-list 'auto-mode-alist '("\\.gitignore\\'" . gitignore-mode))
(add-to-list 'auto-mode-alist '("\\.gzip\\'" . dired-mode))
(add-to-list 'auto-mode-alist '("\\.hex\\'" . hexl-mode))
(add-to-list 'auto-mode-alist '("\\.hs\\'" . haskell-mode))
(add-to-list 'auto-mode-alist '("\\.htm\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.ino\\'" . arduino-mode))
(add-to-list 'auto-mode-alist '("\\.jpeg\\'" . image-mode))
(add-to-list 'auto-mode-alist '("\\.jpg\\'" . image-mode))
(add-to-list 'auto-mode-alist '("\\.js\\'" . js3-mode))
(add-to-list 'auto-mode-alist '("\\.json\\'" . js3-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.o\\'" . hexl-mode))
(add-to-list 'auto-mode-alist '("\\.pdf\\'" . image-mode))
(add-to-list 'auto-mode-alist '("\\.php\\'" . php-mode))
(add-to-list 'auto-mode-alist '("\\.png\\'" . image-mode))
(add-to-list 'auto-mode-alist '("\\.pyd\\'" . cython-mode))
(add-to-list 'auto-mode-alist '("\\.pyi\\'" .  cython-mode))
(add-to-list 'auto-mode-alist '("\\.pyx\\'" . cython-mode))
(add-to-list 'auto-mode-alist '("\\.rb\\'" . inf-ruby-minor-mode))
(add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode))
(add-to-list 'auto-mode-alist '("\\.sh\\'" . shell-script-mode))
(add-to-list 'auto-mode-alist '("\\.so\\'" . hexl-mode))
(add-to-list 'auto-mode-alist '("\\.svg\\'" . image-mode))
(add-to-list 'auto-mode-alist '("\\.tar.gz\\'" . dired-mode))
(add-to-list 'auto-mode-alist '("\\.tar\\'" . dired-mode))
(add-to-list 'auto-mode-alist '("\\.tgz\\'" . dired-mode))
(add-to-list 'auto-mode-alist '("\\.tif\\'" . image-mode))
(add-to-list 'auto-mode-alist '("\\.tiff\\'" . image-mode))
(add-to-list 'auto-mode-alist '("\\.txt\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.webp\\'" . image-mode))
(add-to-list 'auto-mode-alist '("\\.xhtml\\'" . nxml-mode))
(add-to-list 'auto-mode-alist '("\\.xz\\'" . dired-mode))
(add-to-list 'auto-mode-alist '("\\.zip\\'" . dired-mode))
(add-to-list 'auto-mode-alist '("\\.zsh\\'" . shell-script-mode))
#+END_SRC
** hooks.el
(An elisp file to set how modes interact.)

#+BEGIN_SRC emacs-lisp :tangle yes
;; icons in dired buffers

(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)

;; enable visual line wrapping in text modes

(add-hook 'text-mode-hook 'visual-line-mode)

;; enable yasnippet selectively in some modes

(add-hook 'android-mode-hook 'yas-minor-mode +1)
(add-hook 'arduino-mode-hook 'yas-minor-mode +1)
(add-hook 'c++-mode-hook 'yas-minor-mode +1)
(add-hook 'c-mode-hook 'yas-minor-mode +1)
(add-hook 'clojure-mode-hook 'yas-minor-mode +1)
(add-hook 'edn-mode-hook 'yas-minor-mode +1)
(add-hook 'ein-mode-hook 'yas-minor-mode +1)
(add-hook 'emacs-lisp-mode-hook 'yas-minor-mode +1)
(add-hook 'go-mode-hook 'yas-minor-mode +1)
(add-hook 'haskell-mode-hook 'yas-minor-mode +1)
(add-hook 'java-mode-hook 'yas-minor-mode +1)
(add-hook 'js2-mode-hook 'yas-minor-mode +1)
(add-hook 'lisp-interaction-mode-hook 'yas-minor-mode +1)
(add-hook 'fundemental-mode-hook 'yas-minor-mode +1)
(add-hook 'markdown-mode-hook 'yas-minor-mode +1)
(add-hook 'nxml-mode-hook 'yas-minor-mode +1)
(add-hook 'org-mode-hook 'yas-minor-mode +1)
(add-hook 'perl-mode-hook 'yas-minor-mode +1)
(add-hook 'php-mode-hook 'yas-minor-mode +1)
(add-hook 'python-mode-hook 'yas-minor-mode +1)
(add-hook 'ruby-mode-hook 'yas-minor-mode +1)
(add-hook 'rust-mode-hook 'yas-minor-mode +1)
(add-hook 'scala-mode-hook 'yas-minor-mode +1)
(add-hook 'shell-mode-hook 'yas-minor-mode +1)
(add-hook 'web-mode-hook 'yas-minor-mode +1)
(add-hook 'yaml-mode-hook 'yas-minor-mode +1)

;; gnus

(add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus)

;; company

(add-hook 'lisp-interaction-mode-hook
          (lambda ()
            (set (make-local-variable 'company-backends)
                 '(company-elisp))))

;; org-gcal-sync

(add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync) ))
(add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))
#+END_SRC
** keybindings.el
(An elisp file to set custom key sequences and shortcuts in Emacs.)

#+BEGIN_SRC emacs-lisp :tangle yes
;; Keybindings originally for the kinesis advantage

(defun wizard-keys ()
  "keybindings for wizard-mode"

  ;; testing keys

  (global-set-key (kbd "M-<up>") 'backward-page)
  (global-set-key (kbd "M-<down>") 'forward-page)

  ;; emacspeak

  (global-set-key (kbd "C-<f6>") 'toggle-tones)
  (global-set-key (kbd "<pause>")'emacspeak-speak-buffer-interactively)
  (global-set-key (kbd "C-<pause>")'emacspeak-speak-buffer-filename)

;; completion

  (global-set-key "\t" 'indent-relative)

  ;;  (global-set-key "\t" 'company-complete-common)
  (global-set-key (kbd "C--") 'hippie-expand)
  (global-set-key (kbd "C-0") 'company-complete)

  ;; text scrubbing

  ;; visual regexp

  (global-set-key (kbd "<ESC> M-q") 'vr/query-replace)
  (global-set-key (kbd "<ESC> M-r") 'vr/replace)

  ;; ag

  (global-set-key (kbd "M-g d") 'ag-dired)
  (global-set-key (kbd "M-g f") 'ag-files)

  ;; avy

  (global-set-key (kbd "C-<Scroll_Lock>") 'avy-pop-mark)
  (global-set-key (kbd "<ESC> M-c") 'avy-goto-char)
  (global-set-key (kbd "<ESC> M-w") 'avy-goto-word-0)
  (global-set-key (kbd "<ESC> M-l") 'avy-goto-line)

  ;; whitespace

  (global-set-key (kbd "<ESC> M-=") 'fixup-whitespace)

  
  ;; thumb keys (kinesis advantage)

  (global-set-key (kbd "<end>") 'action-key)
  (global-set-key (kbd "<prior>") 'hyperbole)
  (global-set-key (kbd "<next>") 'dtk-stop)
  (global-set-key (kbd "s-<next>") 'ace-window)
  (global-set-key (kbd "s-<prior>") 'ace-window)
  (global-set-key (kbd "C-M-<next>") 'next-buffer)
  (global-set-key (kbd "C-M-<prior>") 'previous-buffer)
  (global-set-key (kbd "<home>") 'keyboard-escape-quit)
  (global-set-key (kbd "M-<prior>") 'scroll-down-command)
  (global-set-key (kbd "M-<next>") 'scroll-up-command)
  (global-set-key (kbd "M-<home>") 'move-beginning-of-line)
  (global-set-key (kbd "M-<end>") 'move-end-of-line)
  (global-set-key (kbd "C-<next>") 'ace-window)
  (global-set-key (kbd "C-<prior>") 'ace-window)

  ;; ui

  (global-set-key (kbd "<ESC> M-h") 'hyperbole)
  (global-set-key (kbd "<ESC> M-\\") 'hidden-mode-line-mode)
  (global-set-key (kbd "C-<tab>") 'ace-window)
  (global-set-key (kbd "<ESC> <ESC> <ESC>") 'keyboard-escape-quit)
  (global-set-key (kbd "<ESC> M-b") 'helm-buffers-list)
  (global-set-key (kbd "<mouse-8>") 'previous-buffer)
  (global-set-key (kbd "<mouse-9>")'next-buffer)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
  (global-set-key (kbd "<f1>") 'helm-buffers-list)
  (global-set-key (kbd "<f2>") 'helm-company)
  (global-set-key (kbd "M-<f1>") 'helm-mt)
  (global-set-key (kbd "C-<f12>") 'hidden-mode-line-mode)
  (global-set-key (kbd "C-<f2>")
                  (lambda ()
                    (interactive)
                    (find-file "~/.emacs")))

  (global-set-key (kbd "<C-f3>")
                  (lambda ()
                    (interactive)
                    (switch-to-buffer "*Messages*")))
  (global-set-key (kbd  "<ESC> M-a")
                  (lambda ()
                    (interactive)
                    (find-file "~/.emacs.d/mma.org")))


  ;; major modes

  
  ;; multi-term alist
  (defcustom term-unbind-key-list '("M-[" "C-z" "C-x" "C-c" "C-h" "C-y" "<ESC>")
    "The key list that will need to be unbind."
    :type 'list
    :group 'multi-term)
  (defcustom term-bind-key-alist
    '(("C-c C-c" . term-interrupt-subjob)
      ("C-p" . previous-line)
      ("C-n" . next-line)
      ("C-s" . isearch-forward)
      ("C-r" . isearch-backward)
      ("C-m" . term-send-raw)
      ("M-f" . term-send-forward-word)
      ("M-b" . term-send-backward-word)
      ("M-o" . term-send-backspace)
      ("M-p" . term-send-up)
      ("M-n" . term-send-down)
      ("M-M" . term-send-forward-kill-word)
      ("M-N" . term-send-backward-kill-word)
      ("M-r" . term-send-reverse-search-history)
      ("M-," . term-send-input)
      ("M-." . comint-dynamic-complete))
    "The key alist that will need to be bind."
    :type 'alist
    :group 'multi-term)
  ;; erc hide-join-part-quit-key
  (eval-after-load "erc" '(progn (define-key erc-mode-map "C-M-h"
                                   (lambda ()
                                     (interactive "")
                                     (setq erc-hide-list '("JOIN" "PART" "QUIT"))))))

  ;; counsel-spotify
  ;; skip around playlists in the official spotify app via D-bus service
  
  (global-set-key (kbd "<ESC> M-n") 'counsel-spotify-next)
  (global-set-key (kbd "<ESC> M-p") 'counsel-spotify-previous)
  (global-set-key (kbd "<ESC> M-<SPC>") 'counsel-spotify-toggle-play-pause)

  ;; magit
  
  (global-set-key (kbd "<ESC> M-;") 'magit-status)

;; mode switching
  ;; keys to switch between different modes
  
  (global-set-key (kbd "<f5>") 'nlinum-mode)
  (global-set-key (kbd "<f6>") 'ispell-word)
  (global-set-key (kbd "<ESC> M-i") 'ispell-word)
  (global-set-key (kbd "<f7>") 'flyspell-mode)
  (global-set-key (kbd "<f8>") 'dired-sidebar-toggle-sidebar)
  (global-set-key (kbd "<f9>") 'minimap-mode)
  (global-set-key (kbd "<f12>") 'menu-bar-mode)
  (global-set-key (kbd "<C-f5>") 'scroll-bar-mode)
  (global-set-key (kbd "<C-f7>")'flycheck-mode)
  (global-set-key (kbd "<C-f8>") 'tabbar-mode)
  (global-set-key (kbd "<ESC> M-R") 'yas-reload-all)
  (global-set-key (kbd "<ESC> M-d") 'dired)
  (global-set-key (kbd "<ESC> M-f") 'flyspell)
  (global-set-key (kbd "<ESC> M-g") 'visit-gnus)
  (global-set-key (kbd "<ESC> M-m") 'markdown-mode)
  (global-set-key (kbd "<ESC> M-o") 'org-mode)
  (global-set-key (kbd "<ESC> M-v") 'visit-paradox)
  (global-set-key (kbd "<ESC> M-s") 'start-emacspeak)
  (global-set-key (kbd "<ESC> M-t") 'multi-term)
  (global-set-key (kbd "<ESC> M-y") 'yas-minor-mode)
  (global-set-key (kbd "C-s-SPC") 'dtk-stop))

(wizard-keys)

;; sudo-prepend

(fset 'sudo-prepend-up [up home ?s ?u ?d ?o ?  end])
(fset 'sudo-prepend [home ?s ?u ?d ?o ?  end])

;; easy-kill

(global-set-key [remap kill-ring-save] 'easy-kill)
(global-set-key [remap mark-sexp] 'easy-mark)

;; aptitude search key bindings for paradox

(defun my-paradox-mode-keys ()
  "Modify keymaps used by paradox to make searching easier."
  (local-set-key (kbd "/") 'isearch-forward-regexp)
  (local-set-key (kbd "-") 'isearch-backward-regexp))
(add-hook 'paradox-menu-mode-hook 'my-paradox-mode-keys)

;; org-agenda

(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)


;; window resizing

(global-set-key (kbd "C-s-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "C-s-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "C-s-<down>") 'shrink-window)
(global-set-key (kbd "C-s-<up>") 'enlarge-window)

;; dired-sidebar

(global-set-key (kbd "<ESC> M-z") 'dired-sidebar-toggle-sidebar)
(global-set-key (kbd "C-<escape>") 'dired-sidebar-toggle-sidebar)

;; paradox upgrade packages 

(global-set-key (kbd "<ESC> M-u") 'paradox-upgrade-packages)

;; mini

(global-set-key (kbd "<ESC> M-/") 'minimap-mode)

;; atreus window keys

(global-set-key (kbd "C-x p") 'delete-window)
(global-set-key (kbd "C-x q") 'delete-other-windows)
(global-set-key (kbd "C-x w") 'split-window-below)
(global-set-key (kbd "C-x t") 'make-frame-command)

#+END_SRC
** modes.el
(An elisp file to customize modes. This includes, global modes, and 
the initialization of the Emacspeak text-to-speech subsystem.)

#+BEGIN_SRC emacs-lisp :tangle yes
;; smex

(smex-initialize)

;; global modes
(global-undo-tree-mode)


;; Emacspeak (global-voice-lock-mode)
;; uncomment the following line to load speech during init

;;(load-file "~/emacspeak/lisp/emacspeak-setup.el")

#+END_SRC
** ensure-packages.el
(An elisp file to ensure Emacs packages are installed.)

#+BEGIN_SRC emacs-lisp :tangle yes
;; Make sure these packages are installed

(unless (package-installed-p 'ac-html)
  (package-refresh-contents)
  (package-install 'ac-html))

(unless (package-installed-p 'ac-html-angular)
  (package-refresh-contents)
  (package-install 'ac-html-angular))

(unless (package-installed-p 'ac-html-bootstrap)
  (package-refresh-contents)
  (package-install 'ac-html-bootstrap))

(unless (package-installed-p 'ac-html-csswatcher)
  (package-refresh-contents)
  (package-install 'ac-html-csswatcher))

(unless (package-installed-p 'ac-inf-ruby)
  (package-refresh-contents)
  (package-install 'ac-inf-ruby))

(unless (package-installed-p 'ac-helm)
  (package-refresh-contents)
  (package-install 'ac-helm))

(unless (package-installed-p 'ac-ispell)
  (package-refresh-contents)
  (package-install 'ac-ispell))

(unless (package-installed-p 'ac-js2)
  (package-refresh-contents)
  (package-install 'ac-js2))

(unless (package-installed-p 'ac-math)
  (package-refresh-contents)
  (package-install 'ac-math))

(unless (package-installed-p 'ac-mc)
  (package-refresh-contents)
  (package-install 'ace-mc))

(unless (package-installed-p 'ace-flyspell)
  (package-refresh-contents)
  (package-install 'ace-flyspell))

(unless (package-installed-p 'ace-isearch)
  (package-refresh-contents)
  (package-install 'ace-isearch))

(unless (package-installed-p 'ace-window)
  (package-refresh-contents)
  (package-install 'ace-window))

(unless (package-installed-p 'adafruit-wisdom)
  (package-refresh-contents)
  (package-install 'adafruit-wisdom))

(unless (package-installed-p 'adaptive-wrap)
  (package-refresh-contents)
  (package-install 'adaptive-wrap))

(unless (package-installed-p 'ag)
  (package-refresh-contents)
  (package-install 'ag))

(unless (package-installed-p 'aggressive-indent)
  (package-refresh-contents)
  (package-install 'aggressive-indent))

(unless (package-installed-p 'ahk-mode)
  (package-refresh-contents)
  (package-install 'ahk-mode))

(unless (package-installed-p 'all-the-icons-dired)
  (package-refresh-contents)
  (package-install 'all-the-icons-dired))

(unless (package-installed-p 'all-the-icons-gnus)
  (package-refresh-contents)
  (package-install 'all-the-icons-gnus))

(unless (package-installed-p 'all-the-icons-ivy)
  (package-refresh-contents)
  (package-install 'all-the-icons-ivy))

(unless (package-installed-p 'ample-regexps)
  (package-refresh-contents)
  (package-install 'ample-regexps))

(unless (package-installed-p 'arduino-mode)
  (package-refresh-contents)
  (package-install 'arduino-mode))

(unless (package-installed-p 'aria2)
  (package-refresh-contents)
  (package-install 'aria2))

(unless (package-installed-p 'async-await)
  (package-refresh-contents)
  (package-install 'async-await))

(unless (package-installed-p 'auctex)
  (package-refresh-contents)
  (package-install 'auctex))

(unless (package-installed-p 'auto-minor-mode)
  (package-refresh-contents)
  (package-install 'auto-minor-mode))

(unless (package-installed-p 'auto-complete-auctex)
  (package-refresh-contents)
  (package-install 'auto-complete-auctex))

(unless (package-installed-p 'auto-complete-c-headers)
  (package-refresh-contents)
  (package-install 'auto-complete-c-headers))

(unless (package-installed-p 'auto-complete-chunk)
  (package-refresh-contents)
  (package-install 'auto-complete-chunk))

(unless (package-installed-p 'auto-complete-clang)
  (package-refresh-contents)
  (package-install 'auto-complete-clang))

(unless (package-installed-p 'avy)
  (package-refresh-contents)
  (package-install 'avy))

(unless (package-installed-p 'bash-completion)
  (package-refresh-contents)
  (package-install 'bash-completion))

(unless (package-installed-p 'bbcode-mode)
  (package-refresh-contents)
  (package-install 'bbcode-mode))

(unless (package-installed-p 'bbdb)
  (package-refresh-contents)
  (package-install 'bbdb))

(unless (package-installed-p 'bind-chord)
  (package-refresh-contents)
  (package-install 'bind-chord))

(unless (package-installed-p 'borg)
  (package-refresh-contents)
  (package-install 'borg))

(unless (package-installed-p 'browse-kill-ring)
  (package-refresh-contents)
  (package-install 'browse-kill-ring))

(unless (package-installed-p 'bug-hunter)
  (package-refresh-contents)
  (package-install 'bug-hunter))

(unless (package-installed-p 'chess)
  (package-refresh-contents)
  (package-install 'chess))

(unless (package-installed-p 'company)
  (package-refresh-contents)
  (package-install 'company))

(unless (package-installed-p 'company-arduino)
  (package-refresh-contents)
  (package-install 'company-arduino))

(unless (package-installed-p 'company-auctex)
  (package-refresh-contents)
  (package-install 'company-auctex))

(unless (package-installed-p 'company-c-headers)
  (package-refresh-contents)
  (package-install 'company-c-headers))

(unless (package-installed-p 'company-dict)
  (package-refresh-contents)
  (package-install 'company-dict))

(unless (package-installed-p 'company-emoji)
  (package-refresh-contents)
  (package-install 'company-emoji))

(unless (package-installed-p 'company-inf-ruby)
  (package-refresh-contents)
  (package-install 'company-inf-ruby))

(unless (package-installed-p 'company-irony)
  (package-refresh-contents)
  (package-install 'company-irony))

(unless (package-installed-p 'company-jedi)
  (package-refresh-contents)
  (package-install 'company-jedi))

(unless (package-installed-p 'company-math)
  (package-refresh-contents)
  (package-install 'company-math))

(unless (package-installed-p 'company-php)
  (package-refresh-contents)
  (package-install 'company-php))
  
(unless (package-installed-p 'company-shell)
  (package-refresh-contents)
  (package-install 'company-shell))

(unless (package-installed-p 'company-sourcekit)
  (package-refresh-contents)
  (package-install 'company-sourcekit))

(unless (package-installed-p 'company-statistics)
  (package-refresh-contents)
  (package-install 'company-statistics))

(unless (package-installed-p 'company-suggest)
  (package-refresh-contents)
  (package-install 'company-suggest))

(unless (package-installed-p 'company-try-hard)
  (package-refresh-contents)
  (package-install 'company-try-hard))

(unless (package-installed-p 'company-web)
  (package-refresh-contents)
  (package-install 'company-web))

(unless (package-installed-p 'concurrent)
  (package-refresh-contents)
  (package-install 'concurrent))

(unless (package-installed-p 'counsel)
  (package-refresh-contents)
  (package-install 'counsel))

(unless (package-installed-p 'counsel)
  (package-refresh-contents)
  (package-install 'counsel-codesearch))

(unless (package-installed-p 'counsel-tramp)
  (package-refresh-contents)
  (package-install 'counsel-tramp))

(unless (package-installed-p 'csv-mode)
  (package-refresh-contents)
  (package-install 'csv-mode))

(unless (package-installed-p 'crux)
  (package-refresh-contents)
  (package-install 'crux))

(unless (package-installed-p 'diffview)
  (package-refresh-contents)
  (package-install 'diffview))

(unless (package-installed-p 'dired-sidebar)
  (package-refresh-contents)
  (package-install 'dired-sidebar))
  
(unless (package-installed-p 'dired-subtree)
  (package-refresh-contents)
  (package-install 'dired-subtree))

(unless (package-installed-p 'dired-toggle)
  (package-refresh-contents)
  (package-install 'dired-toggle))

(unless (package-installed-p 'dired-toggle-sudo)
  (package-refresh-contents)
  (package-install 'dired-toggle-sudo))

(unless (package-installed-p 'direx)
  (package-refresh-contents)
  (package-install 'direx))

(unless (package-installed-p 'direx-grep)
  (package-refresh-contents)
  (package-install 'direx-grep))

(unless (package-installed-p 'dismal)
  (package-refresh-contents)
  (package-install 'dismal))

(unless (package-installed-p 'dotnet)
  (package-refresh-contents)
  (package-install 'dotnet))

(unless (package-installed-p 'easy-kill)
  (package-refresh-contents)
  (package-install 'easy-kill))

(unless (package-installed-p 'edn)
  (package-refresh-contents)
  (package-install 'edn))

(unless (package-installed-p 'ein)
  (package-refresh-contents)
  (package-install 'ein))

(unless (package-installed-p 'electric-case)
  (package-refresh-contents)
  (package-install 'electric-case))

(unless (package-installed-p 'electric-operator)
  (package-refresh-contents)
  (package-install 'electric-operator))

(unless (package-installed-p 'electric-spacing)
  (package-refresh-contents)
  (package-install 'electric-spacing))

(unless (package-installed-p 'elfeed)
  (package-refresh-contents)
  (package-install 'elfeed))

(unless (package-installed-p 'elfeed-goodies)
  (package-refresh-contents)
  (package-install 'elfeed-goodies))

(unless (package-installed-p 'elfeed-org)
  (package-refresh-contents)
  (package-install 'elfeed-org))

(unless (package-installed-p 'elfeed-protocol)
  (package-refresh-contents)
  (package-install 'elfeed-protocol))

(unless (package-installed-p 'elfeed-web)
  (package-refresh-contents)
  (package-install 'elfeed-web))

(unless (package-installed-p 'el-get)
  (package-refresh-contents)
  (package-install 'el-get))

(unless (package-installed-p 'emmet-mode)
  (package-refresh-contents)
  (package-install 'emmet-mode))

(unless (package-installed-p 'emms)
  (package-refresh-contents)
  (package-install 'emms))

(unless (package-installed-p 'erc-colorize)
  (package-refresh-contents)
  (package-install 'erc-colorize))

(unless (package-installed-p 'erc-hl-nicks)
  (package-refresh-contents)
  (package-install 'erc-hl-nicks))

(unless (package-installed-p 'erc-terminal-notifier)
  (package-refresh-contents)
  (package-install 'erc-terminal-notifier))

(unless (package-installed-p 'erc-tweet)
  (package-refresh-contents)
  (package-install 'erc-tweet))

(unless (package-installed-p 'erc-twitch)
  (package-refresh-contents)
  (package-install 'erc-twitch))

(unless (package-installed-p 'erc-youtube)
  (package-refresh-contents)
  (package-install 'erc-youtube))

(unless (package-installed-p 'erlang)
  (package-refresh-contents)
  (package-install 'erlang))

(unless (package-installed-p 'ess)
  (package-refresh-contents)
  (package-install 'ess))

(unless (package-installed-p 'evil)
  (package-refresh-contents)
  (package-install 'evil))

(unless (package-installed-p 'evil-avy)
  (package-refresh-contents)
  (package-install 'evil-avy))

(unless (package-installed-p 'evil-lispy)
  (package-refresh-contents)
  (package-install 'evil-lispy))

(unless (package-installed-p 'evil-mc)
  (package-refresh-contents)
  (package-install 'evil-mc))

(unless (package-installed-p 'evil-mc-extras)
  (package-refresh-contents)
  (package-install 'evil-mc-extras))

(unless (package-installed-p 'expand-region)
  (package-refresh-contents)
  (package-install 'expand-region))

(unless (package-installed-p 'flycheck)
  (package-refresh-contents)
  (package-install 'flycheck))

(unless (package-installed-p 'flycheck-rtags)
  (package-refresh-contents)
  (package-install 'flycheck-rtags))

(unless (package-installed-p 'free-keys)
  (package-refresh-contents)
  (package-install 'free-keys))

(unless (package-installed-p 'gitconfig)
  (package-refresh-contents)
  (package-install 'gitconfig))

(unless (package-installed-p 'git-gutter-fringe+)
  (package-refresh-contents)
  (package-install 'git-gutter-fringe+))

(unless (package-installed-p 'github-clone)
  (package-refresh-contents)
  (package-install 'github-clone))

(unless (package-installed-p 'github-elpa)
  (package-refresh-contents)
  (package-install 'github-elpa))

(unless (package-installed-p 'github-notifier)
  (package-refresh-contents)
  (package-install 'github-notifier))

(unless (package-installed-p 'github-pullrequest)
  (package-refresh-contents)
  (package-install 'github-pullrequest))

(unless (package-installed-p 'github-search)
  (package-refresh-contents)
  (package-install 'github-search))

(unless (package-installed-p 'github-stars)
  (package-refresh-contents)
  (package-install 'github-stars))

(unless (package-installed-p 'gist)
  (package-refresh-contents)
  (package-install 'gist))

(unless (package-installed-p 'gmail2bbdb)
  (package-refresh-contents)
  (package-install 'gmail2bbdb))

(unless (package-installed-p 'gnugo)
  (package-refresh-contents)
  (package-install 'gnugo))

(unless (package-installed-p 'google)
  (package-refresh-contents)
  (package-install 'google))

(unless (package-installed-p 'google-c-style)
  (package-refresh-contents)
  (package-install 'google-c-style))

(unless (package-installed-p 'google-translate)
  (package-refresh-contents)
  (package-install 'google-translate))

(unless (package-installed-p 'graphene)
  (package-refresh-contents)
  (package-install 'graphene))

(unless (package-installed-p 'helm)
  (package-refresh-contents)
  (package-install 'helm))

(unless (package-installed-p 'helm-ack)
  (package-refresh-contents)
  (package-install 'helm-ack))

(unless (package-installed-p 'helm-ag)
  (package-refresh-contents)
  (package-install 'helm-ag))

(unless (package-installed-p 'helm-bbdb)
  (package-refresh-contents)
  (package-install 'helm-bbdb))

(unless (package-installed-p 'helm-bind-key)
  (package-refresh-contents)
  (package-install 'helm-bind-key))

(unless (package-installed-p 'helm-bm)
  (package-refresh-contents)
  (package-install 'helm-bm))

(unless (package-installed-p 'helm-books)
  (package-refresh-contents)
  (package-install 'helm-books))

(unless (package-installed-p 'helm-c-yasnippet)
  (package-refresh-contents)
  (package-install 'helm-c-yasnippet))

(unless (package-installed-p 'helm-company)
  (package-refresh-contents)
  (package-install 'helm-company))

(unless (package-installed-p 'helm-dictionary)
  (package-refresh-contents)
  (package-install 'helm-dictionary))

(unless (package-installed-p 'helm-dired-history)
  (package-refresh-contents)
  (package-install 'helm-dired-history)) 

(unless (package-installed-p 'helm-dired-recent-dirs)
  (package-refresh-contents)
  (package-install 'helm-dired-recent-dirs))

(unless (package-installed-p 'helm-directory)
  (package-refresh-contents)
  (package-install 'helm-directory))

(unless (package-installed-p 'helm-emmet)
  (package-refresh-contents)
  (package-install 'helm-emmet))

(unless (package-installed-p 'helm-emms)
  (package-refresh-contents)
  (package-install 'helm-emms))

(unless (package-installed-p 'helm-eww)
  (package-refresh-contents)
  (package-install 'helm-eww))

(unless (package-installed-p 'helm-firefox)
  (package-refresh-contents)
  (package-install 'helm-firefox))

(unless (package-installed-p 'helm-flycheck)
  (package-refresh-contents)
  (package-install 'helm-flycheck))

(unless (package-installed-p 'helm-flymake)
  (package-refresh-contents)
  (package-install 'helm-flymake))

(unless (package-installed-p 'helm-fuzzy-find)
  (package-refresh-contents)
  (package-install 'helm-fuzzy-find))

(unless (package-installed-p 'helm-gitlab)
  (package-refresh-contents)
  (package-install 'helm-gitlab))

(unless (package-installed-p 'helm-git)
  (package-refresh-contents)
  (package-install 'helm-git))

(unless (package-installed-p 'helm-git-grep)
  (package-refresh-contents)
  (package-install 'helm-git-grep))

(unless (package-installed-p 'helm-github-stars)
  (package-refresh-contents)
  (package-install 'helm-github-stars))

(unless (package-installed-p 'helm-gitignore)
  (package-refresh-contents)
  (package-install 'helm-gitignore))

(unless (package-installed-p 'helm-google)
  (package-refresh-contents)
  (package-install 'helm-bbdb))

(unless (package-installed-p 'helm-gtags)
  (package-refresh-contents)
  (package-install 'helm-gtags))

(unless (package-installed-p 'helm-open-github)
  (package-refresh-contents)
  (package-install 'helm-open-github))

(unless (package-installed-p 'helm-helm-commands)
  (package-refresh-contents)
  (package-install 'helm-helm-commands))

(unless (package-installed-p 'helm-hoogle)
  (package-refresh-contents)
  (package-install 'helm-hoogle))

(unless (package-installed-p 'helm-img)
  (package-refresh-contents)
  (package-install 'helm-img))

(unless (package-installed-p 'helm-ispell)
  (package-refresh-contents)
  (package-install 'helm-ispell))

(unless (package-installed-p 'helm-lines)
  (package-refresh-contents)
  (package-install 'helm-lines))

(unless (package-installed-p 'helm-ls-git)
  (package-refresh-contents)
  (package-install 'helm-ls-git))

(unless (package-installed-p 'helm-ls-hg)
  (package-refresh-contents)
  (package-install 'helm-ls-hg))

(unless (package-installed-p 'helm-ls-svn)
  (package-refresh-contents)
  (package-install 'helm-ls-svn))

(unless (package-installed-p 'helm-make)
  (package-refresh-contents)
  (package-install 'helm-make))

(unless (package-installed-p 'helm-mode-manager)
  (package-refresh-contents)
  (package-install 'helm-mode-manager))

(unless (package-installed-p 'helm-mt)
  (package-refresh-contents)
  (package-install 'helm-mt))

(unless (package-installed-p 'helm-notmuch)
  (package-refresh-contents)
  (package-install 'helm-notmuch))

(unless (package-installed-p 'helm-orgcard)
  (package-refresh-contents)
  (package-install 'helm-orgcard))

(unless (package-installed-p 'helm-pages)
  (package-refresh-contents)
  (package-install 'helm-pages))

(unless (package-installed-p 'helm-pass)
  (package-refresh-contents)
  (package-install 'helm-pass))

(unless (package-installed-p 'helm-pydoc)
  (package-refresh-contents)
  (package-install 'helm-pydoc))

(unless (package-installed-p 'helm-robe)
  (package-refresh-contents)
  (package-install 'helm-robe))

(unless (package-installed-p 'helm-smex)
  (package-refresh-contents)
  (package-install 'helm-smex))

(unless (package-installed-p 'helm-swoop)
  (package-refresh-contents)
  (package-install 'helm-swoop))

(unless (package-installed-p 'helm-systemd)
  (package-refresh-contents)
  (package-install 'helm-systemd))

(unless (package-installed-p 'helm-themes)
  (package-refresh-contents)
  (package-install 'helm-themes))

(unless (package-installed-p 'helm-tramp)
  (package-refresh-contents)
  (package-install 'helm-tramp))

(unless (package-installed-p 'helm-unicode)
  (package-refresh-contents)
  (package-install 'helm-unicode))

(unless (package-installed-p 'helm-w3m)
  (package-refresh-contents)
  (package-install 'helm-w3m))

(unless (package-installed-p 'helm-wordnet)
  (package-refresh-contents)
  (package-install 'helm-wordnet))

(unless (package-installed-p 'helm-youtube)
  (package-refresh-contents)
  (package-install 'helm-youtube))

(unless (package-installed-p 'hide-mode-line)
  (package-refresh-contents)
  (package-install 'hide-mode-line))

(unless (package-installed-p 'history)
  (package-refresh-contents)
  (package-install 'history))

(unless (package-installed-p 'hl-indent)
  (package-refresh-contents)
  (package-install 'hl-indent))

(unless (package-installed-p 'hl-sentence)
  (package-refresh-contents)
  (package-install 'hl-sentence))

(unless (package-installed-p 'hl-todo)
  (package-refresh-contents)
  (package-install 'hl-todo))

(unless (package-installed-p 'ido-at-point)
  (package-refresh-contents)
  (package-install 'ido-at-point))

(unless (package-installed-p 'ido-yes-or-no)
  (package-refresh-contents)
  (package-install 'ido-yes-or-no))

(unless (package-installed-p 'indent-guide)
  (package-refresh-contents)
  (package-install 'indent-guide))

(unless (package-installed-p 'inf-ruby)
  (package-refresh-contents)
  (package-install 'inf-ruby))

(unless (package-installed-p 'ioccur)
  (package-refresh-contents)
  (package-install 'ioccur))

(unless (package-installed-p 'ivy)
  (package-refresh-contents)
  (package-install 'ivy))

(unless (package-installed-p 'ivy-hydra)
  (package-refresh-contents)
  (package-install 'ivy-hydra))

(unless (package-installed-p 'ivy-yasnippet)
  (package-refresh-contents)
  (package-install 'ivy-yasnippet))

(unless (package-installed-p 'jedi)
  (package-refresh-contents)
  (package-install 'jedi))

(unless (package-installed-p 'js2-refactor)
  (package-refresh-contents)
  (package-install 'js2-refactor))

(unless (package-installed-p 'js3-mode)
  (package-refresh-contents)
  (package-install 'js3-mode))

(unless (package-installed-p 'json-mode)
  (package-refresh-contents)
  (package-install 'json-mode))

(unless (package-installed-p 'json-reformat)
  (package-refresh-contents)
  (package-install 'json-reformat))

(unless (package-installed-p 'kaleidoscope)
  (package-refresh-contents)
  (package-install 'kaleidoscope))

(unless (package-installed-p 'kaleidoscope-evil-state-flash)
  (package-refresh-contents)
  (package-install 'kaleidoscope-evil-state-flash))

(unless (package-installed-p 'keymap-utils)
  (package-refresh-contents)
  (package-install 'keymap-utils))

(unless (package-installed-p 'load-env-vars)
  (package-refresh-contents)
  (package-install 'load-env-vars))

(unless (package-installed-p 'magit)
  (package-refresh-contents)
  (package-install 'magit))

(unless (package-installed-p 'magit-annex)
  (package-refresh-contents)
  (package-install 'magit-annex))

(unless (package-installed-p 'magit-find-file)
  (package-refresh-contents)
  (package-install 'magit-find-file))

(unless (package-installed-p 'magit-popup)
  (package-refresh-contents)
  (package-install 'magit-popup))

(unless (package-installed-p 'magithub)
  (package-refresh-contents)
  (package-install 'magithub))

(unless (package-installed-p 'md4rd)
  (package-refresh-contents)
  (package-install 'md4rd))

(unless (package-installed-p 'minimap)
  (package-refresh-contents)
  (package-install 'minimap))

(unless (package-installed-p 'multi-term)
  (package-refresh-contents)
  (package-install 'multi-term))

(unless (package-installed-p 'neotree)
  (package-refresh-contents)
  (package-install 'neotree))

(unless (package-installed-p 'nerdtab)
  (package-refresh-contents)
  (package-install 'nerdtab))

(unless (package-installed-p 'nvm)
  (package-refresh-contents)
  (package-install 'nvm))

(unless (package-installed-p 'oauth)
  (package-refresh-contents)
  (package-install 'oauth))

(unless (package-installed-p 'oauth2)
  (package-refresh-contents)
  (package-install 'oauth2))

(unless (package-installed-p 'ob-ipython)
  (package-refresh-contents)
  (package-install 'ob-ipython))

(unless (package-installed-p 'oer-reveal)
  (package-refresh-contents)
  (package-install 'oer-reveal))

(unless (package-installed-p 'olivetti)
  (package-refresh-contents)
  (package-install 'olivetti))

(unless (package-installed-p 'org)
  (package-refresh-contents)
  (package-install 'org))

(unless (package-installed-p 'org2jekyll)
  (package-refresh-contents)
  (package-install 'org2jekyll))

(unless (package-installed-p 'org2web)
  (package-refresh-contents)
  (package-install 'org2web))

(unless (package-installed-p 'org-brain)
  (package-refresh-contents)
  (package-install 'org-brain))

(unless (package-installed-p 'org-listcruncher)
  (package-refresh-contents)
  (package-install 'org-listcruncher))

(unless (package-installed-p 'org-make-toc)
  (package-refresh-contents)
  (package-install 'org-make-toc))

(unless (package-installed-p 'org-pretty-tags)
  (package-refresh-contents)
  (package-install 'org-pretty-tags))

(unless (package-installed-p 'org-ref)
  (package-refresh-contents)
  (package-install 'org-ref))

(unless (package-installed-p 'ox-epub)
  (package-refresh-contents)
  (package-install 'ox-epub))

(unless (package-installed-p 'ox-html5slide)
  (package-refresh-contents)
  (package-install 'ox-html5slide))

(unless (package-installed-p 'ox-pandoc)
  (package-refresh-contents)
  (package-install 'ox-pandoc))

(unless (package-installed-p 'ox-reveal)
  (package-refresh-contents)
  (package-install 'ox-reveal))

(unless (package-installed-p 'pabbrev)
  (package-refresh-contents)
  (package-install 'pabbrev))

(unless (package-installed-p 'pandoc)
  (package-refresh-contents)
  (package-install 'pandoc))

(unless (package-installed-p 'pandoc-mode)
  (package-refresh-contents)
  (package-install 'pandoc-mode))

(unless (package-installed-p 'pdf-tools)
  (package-refresh-contents)
  (package-install 'pdf-tools))

(unless (package-installed-p 'powerline)
  (package-refresh-contents)
  (package-install 'powerline))

(unless (package-installed-p 'powerline-evil)
  (package-refresh-contents)
  (package-install 'powerline-evil))

(unless (package-installed-p 'powershell)
  (package-refresh-contents)
  (package-install 'powershell))

(unless (package-installed-p 'pretty-symbols)
  (package-refresh-contents)
  (package-install 'pretty-symbols))

(unless (package-installed-p 'projectile)
  (package-refresh-contents)
  (package-install 'projectile))

(unless (package-installed-p 'py-snippets)
  (package-refresh-contents)
  (package-install 'py-snippets))

(unless (package-installed-p 'pydoc)
  (package-refresh-contents)
  (package-install 'pydoc))

(unless (package-installed-p 'pylint)
  (package-refresh-contents)
  (package-install 'pylint))

(unless (package-installed-p 'realgud)
  (package-refresh-contents)
  (package-install 'realgud))

(unless (package-installed-p 'robe)
  (package-refresh-contents)
  (package-install 'robe))

(unless (package-installed-p 'rubocop)
  (package-refresh-contents)
  (package-install 'rubocop))

(unless (package-installed-p 'rubocopfmt)
  (package-refresh-contents)
  (package-install 'rubocopfmt))

(unless (package-installed-p 'sauron)
  (package-refresh-contents)
  (package-install 'sauron))

(unless (package-installed-p 'say-what-im-doing)
  (package-refresh-contents)
  (package-install 'say-what-im-doing))


(unless (package-installed-p 'slack)
  (package-refresh-contents)
  (package-install 'slack))

(unless (package-installed-p 'smartparens)
  (package-refresh-contents)
  (package-install 'smartparens))

(unless (package-installed-p 'solaire-mode)
  (package-refresh-contents)
  (package-install 'solaire-mode))

(unless (package-installed-p 'speechd-el)
  (package-refresh-contents)
  (package-install 'speechd-el))

(unless (package-installed-p 'sx)
  (package-refresh-contents)
  (package-install 'sx))

(unless (package-installed-p 'tabbar)
  (package-refresh-contents)
  (package-install 'tabbar))

(unless (package-installed-p 'tfsmacs)
  (package-refresh-contents)
  (package-install 'tfsmacs))

(unless (package-installed-p 'tide)
  (package-refresh-contents)
  (package-install 'tide))

(unless (package-installed-p 'toc-org)
  (package-refresh-contents)
  (package-install 'toc-org))

(unless (package-installed-p 'treemacs)
  (package-refresh-contents)
  (package-install 'treemacs))

(unless (package-installed-p 'treemacs-magit)
  (package-refresh-contents)
  (package-install 'treemacs-magit))

(unless (package-installed-p 'treemacs-projectile)
  (package-refresh-contents)
  (package-install 'treemacs-projectile))

(unless (package-installed-p 'treemacs-tab-bar)
  (package-refresh-contents)
  (package-install 'treemacs-tab-bar))

(unless (package-installed-p 'twittering-mode)
  (package-refresh-contents)
  (package-install 'twittering-mode))

(unless (package-installed-p 'undo-tree)
  (package-refresh-contents)
  (package-install 'undo-tree))

(unless (package-installed-p 'vdiff)
  (package-refresh-contents)
  (package-install 'vdiff))

(unless (package-installed-p 'vdiff-magit)
  (package-refresh-contents)
  (package-install 'vdiff-magit))

(unless (package-installed-p 'visual-regexp)
  (package-refresh-contents)
  (package-install 'visual-regexp))

(unless (package-installed-p 'visual-regexp-steroids)
  (package-refresh-contents)
  (package-install 'visual-regexp-steroids))

(unless (package-installed-p 'volatile-highlights)
  (package-refresh-contents)
  (package-install 'volatile-highlights))

(unless (package-installed-p 'web-mode)
  (package-refresh-contents)
  (package-install 'web-mode))

(unless (package-installed-p 'web-mode-edit-element)
  (package-refresh-contents)
  (package-install 'web-mode-edit-element))

(unless (package-installed-p 'web-search)
  (package-refresh-contents)
  (package-install 'web-search))

(unless (package-installed-p 'web-server)
  (package-refresh-contents)
  (package-install 'web-server))

(unless (package-installed-p 'websocket)
  (package-refresh-contents)
  (package-install 'websocket))

(unless (package-installed-p 'which-key)
  (package-refresh-contents)
  (package-install 'which-key))

(unless (package-installed-p 'yaml-mode)
  (package-refresh-contents)
  (package-install 'yaml-mode))

(unless (package-installed-p 'yari)
  (package-refresh-contents)
  (package-install 'yari))

(unless (package-installed-p 'yasnippet)
  (package-refresh-contents)
  (package-install 'yasnippet))
 
(unless (package-installed-p 'yasnippet-classic-snippets)
  (package-refresh-contents)
  (package-install 'yasnippet-classic-snippets))
 
(unless (package-installed-p 'yasnippet-snippets)
  (package-refresh-contents)
  (package-install 'yasnippet-snippets))
  
#+END_SRC

* A Thank You
Many people have contributed to my knowlege, and implementation of Emacs.
I would like to thank the following people for their help, and wisdom:


[[https://batsov.com/][Bozhidar Batsov,]]
[[https://sachachua.com/blog/][Sacha Chua]],
[[https://github.com/purcell][Steve Purcell]],
[[http://emacspeak.sourceforge.net/raman/][T.V. Raman]],
[[http://xahlee.info/][Xah Lee]],
[[https://oralux.org/][Gilles Casse]]

* License 
This work is licensed under the Creative Commons Attribution 4.0 International (CC BY 4.0) license.

https://creativecommons.org/licenses/by/4.0/

Made with [[https://orgmode.org/][org-mode]]
